
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00002cd8  00002d6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800072  00800072  00002d7e  2**0
                  ALLOC
  3 .stab         00003270  00000000  00000000  00002d80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018d4  00000000  00000000  00005ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000078c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000097bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b458  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b5b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b845  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c013  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 46 13 	jmp	0x268c	; 0x268c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <main>
      8a:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 02 16 	jmp	0x2c04	; 0x2c04 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 02 16 	jmp	0x2c04	; 0x2c04 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2e 16 	jmp	0x2c5c	; 0x2c5c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DcMotor_Init>:
/*
 * Description :
 * Function responsible for setup the direction for the two motor pins and stop at the DC-Motor at the beginning.
 */
void DcMotor_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* DC-Motor 2 output pins */
	GPIO_setupPinDirection(DC_MOTOR_FIRST_PORT, DC_MOTOR_FIRST_PIN, PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 c3 0a 	call	0x1586	; 0x1586 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_SECOND_PORT, DC_MOTOR_SECOND_PIN, PIN_OUTPUT);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	63 e0       	ldi	r22, 0x03	; 3
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 c3 0a 	call	0x1586	; 0x1586 <GPIO_setupPinDirection>

	/* Stop the DC-Motor at the beginning */
	GPIO_writePin(DC_MOTOR_FIRST_PORT, DC_MOTOR_FIRST_PIN, LOGIC_LOW);
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	62 e0       	ldi	r22, 0x02	; 2
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_SECOND_PORT, DC_MOTOR_SECOND_PIN, LOGIC_LOW);
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	63 e0       	ldi	r22, 0x03	; 3
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_writePin>
}
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <DcMotor_Rotate>:
 * Description :
 * Function responsible for rotate the DC Motor CW/ or A-CW or stop the motor based on the state input state value
 * and send the required duty cycle to the PWM driver based on the required speed value.
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	00 d0       	rcall	.+0      	; 0xb82 <DcMotor_Rotate+0x6>
     b82:	0f 92       	push	r0
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	8a 83       	std	Y+2, r24	; 0x02
     b8a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 duty_cycle;

	/* Write on the DC-Motor pins */
	GPIO_writePin(DC_MOTOR_FIRST_PORT, DC_MOTOR_FIRST_PIN, (state & 0x01));
     b8c:	8a 81       	ldd	r24, Y+2	; 0x02
     b8e:	98 2f       	mov	r25, r24
     b90:	91 70       	andi	r25, 0x01	; 1
     b92:	82 e0       	ldi	r24, 0x02	; 2
     b94:	62 e0       	ldi	r22, 0x02	; 2
     b96:	49 2f       	mov	r20, r25
     b98:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_SECOND_PORT, DC_MOTOR_SECOND_PIN, ((state >> 1) & 0x01));
     b9c:	8a 81       	ldd	r24, Y+2	; 0x02
     b9e:	86 95       	lsr	r24
     ba0:	98 2f       	mov	r25, r24
     ba2:	91 70       	andi	r25, 0x01	; 1
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	63 e0       	ldi	r22, 0x03	; 3
     ba8:	49 2f       	mov	r20, r25
     baa:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_writePin>

	/*Calculate the Duty Cycle and send it to the PWM Driver*/
	duty_cycle = ((uint8)(((uint16)(speed * TOP)) / 100));
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	48 2f       	mov	r20, r24
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	ca 01       	movw	r24, r20
     bb6:	9c 01       	movw	r18, r24
     bb8:	22 0f       	add	r18, r18
     bba:	33 1f       	adc	r19, r19
     bbc:	c9 01       	movw	r24, r18
     bbe:	96 95       	lsr	r25
     bc0:	98 2f       	mov	r25, r24
     bc2:	88 27       	eor	r24, r24
     bc4:	97 95       	ror	r25
     bc6:	87 95       	ror	r24
     bc8:	82 1b       	sub	r24, r18
     bca:	93 0b       	sbc	r25, r19
     bcc:	84 0f       	add	r24, r20
     bce:	95 1f       	adc	r25, r21
     bd0:	24 e6       	ldi	r18, 0x64	; 100
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	b9 01       	movw	r22, r18
     bd6:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__udivmodhi4>
     bda:	cb 01       	movw	r24, r22
     bdc:	89 83       	std	Y+1, r24	; 0x01
	PWM_Timer0_Start(duty_cycle);
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	0e 94 2c 13 	call	0x2658	; 0x2658 <PWM_Timer0_Start>
}
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	cf 91       	pop	r28
     bec:	df 91       	pop	r29
     bee:	08 95       	ret

00000bf0 <main>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

int main(void)
{
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	a6 97       	sbiw	r28, 0x26	; 38
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	f8 94       	cli
     bfe:	de bf       	out	0x3e, r29	; 62
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	cd bf       	out	0x3d, r28	; 61
	uint8 doorPassword[5];
	uint8 samePasswordFlag;
	uint8 wrongPasswordCounter;
	uint8 option;

	SREG |= (1<<7);
     c04:	af e5       	ldi	r26, 0x5F	; 95
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	ef e5       	ldi	r30, 0x5F	; 95
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	80 68       	ori	r24, 0x80	; 128
     c10:	8c 93       	st	X, r24

	TWI_ConfigType TWI_Configurations = {0b0000001, 0x02, ONE};
     c12:	ce 01       	movw	r24, r28
     c14:	43 96       	adiw	r24, 0x13	; 19
     c16:	9e 8f       	std	Y+30, r25	; 0x1e
     c18:	8d 8f       	std	Y+29, r24	; 0x1d
     c1a:	ef e6       	ldi	r30, 0x6F	; 111
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	f8 a3       	std	Y+32, r31	; 0x20
     c20:	ef 8f       	std	Y+31, r30	; 0x1f
     c22:	f3 e0       	ldi	r31, 0x03	; 3
     c24:	f9 a3       	std	Y+33, r31	; 0x21
     c26:	ef 8d       	ldd	r30, Y+31	; 0x1f
     c28:	f8 a1       	ldd	r31, Y+32	; 0x20
     c2a:	00 80       	ld	r0, Z
     c2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c2e:	98 a1       	ldd	r25, Y+32	; 0x20
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	98 a3       	std	Y+32, r25	; 0x20
     c34:	8f 8f       	std	Y+31, r24	; 0x1f
     c36:	ed 8d       	ldd	r30, Y+29	; 0x1d
     c38:	fe 8d       	ldd	r31, Y+30	; 0x1e
     c3a:	00 82       	st	Z, r0
     c3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c3e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c40:	01 96       	adiw	r24, 0x01	; 1
     c42:	9e 8f       	std	Y+30, r25	; 0x1e
     c44:	8d 8f       	std	Y+29, r24	; 0x1d
     c46:	99 a1       	ldd	r25, Y+33	; 0x21
     c48:	91 50       	subi	r25, 0x01	; 1
     c4a:	99 a3       	std	Y+33, r25	; 0x21
     c4c:	e9 a1       	ldd	r30, Y+33	; 0x21
     c4e:	ee 23       	and	r30, r30
     c50:	51 f7       	brne	.-44     	; 0xc26 <main+0x36>
	TWI_init(&TWI_Configurations);
     c52:	ce 01       	movw	r24, r28
     c54:	43 96       	adiw	r24, 0x13	; 19
     c56:	0e 94 24 14 	call	0x2848	; 0x2848 <TWI_init>

	UART_ConfigType UART_Configurations = {EIGHT_BIT_DATA_MODE, DISABLED, ONE_STOP_BIT, 9600};
     c5a:	ce 01       	movw	r24, r28
     c5c:	46 96       	adiw	r24, 0x16	; 22
     c5e:	9b a3       	std	Y+35, r25	; 0x23
     c60:	8a a3       	std	Y+34, r24	; 0x22
     c62:	e8 e6       	ldi	r30, 0x68	; 104
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	fd a3       	std	Y+37, r31	; 0x25
     c68:	ec a3       	std	Y+36, r30	; 0x24
     c6a:	f7 e0       	ldi	r31, 0x07	; 7
     c6c:	fe a3       	std	Y+38, r31	; 0x26
     c6e:	ec a1       	ldd	r30, Y+36	; 0x24
     c70:	fd a1       	ldd	r31, Y+37	; 0x25
     c72:	00 80       	ld	r0, Z
     c74:	8c a1       	ldd	r24, Y+36	; 0x24
     c76:	9d a1       	ldd	r25, Y+37	; 0x25
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	9d a3       	std	Y+37, r25	; 0x25
     c7c:	8c a3       	std	Y+36, r24	; 0x24
     c7e:	ea a1       	ldd	r30, Y+34	; 0x22
     c80:	fb a1       	ldd	r31, Y+35	; 0x23
     c82:	00 82       	st	Z, r0
     c84:	8a a1       	ldd	r24, Y+34	; 0x22
     c86:	9b a1       	ldd	r25, Y+35	; 0x23
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	9b a3       	std	Y+35, r25	; 0x23
     c8c:	8a a3       	std	Y+34, r24	; 0x22
     c8e:	9e a1       	ldd	r25, Y+38	; 0x26
     c90:	91 50       	subi	r25, 0x01	; 1
     c92:	9e a3       	std	Y+38, r25	; 0x26
     c94:	ee a1       	ldd	r30, Y+38	; 0x26
     c96:	ee 23       	and	r30, r30
     c98:	51 f7       	brne	.-44     	; 0xc6e <main+0x7e>
	UART_init(&UART_Configurations);
     c9a:	ce 01       	movw	r24, r28
     c9c:	46 96       	adiw	r24, 0x16	; 22
     c9e:	0e 94 af 14 	call	0x295e	; 0x295e <UART_init>

	DcMotor_Init();
     ca2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DcMotor_Init>

	Buzzer_init();
     ca6:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <Buzzer_init>

	samePasswordFlag = SAME;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	8b 83       	std	Y+3, r24	; 0x03
	do
	{
		if(samePasswordFlag != SAME)
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	39 f0       	breq	.+14     	; 0xcc2 <main+0xd2>
		{
			while(UART_recieveByte() != MC1_READY);
     cb4:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <UART_recieveByte>
     cb8:	80 31       	cpi	r24, 0x10	; 16
     cba:	e1 f7       	brne	.-8      	; 0xcb4 <main+0xc4>
			UART_sendByte(NOT_SAME);
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <UART_sendByte>
		}
		receiveTwoPasswordsFrom_HMI_ECU(firstPassword, secondPassword);
     cc2:	ce 01       	movw	r24, r28
     cc4:	04 96       	adiw	r24, 0x04	; 4
     cc6:	9e 01       	movw	r18, r28
     cc8:	27 5f       	subi	r18, 0xF7	; 247
     cca:	3f 4f       	sbci	r19, 0xFF	; 255
     ccc:	b9 01       	movw	r22, r18
     cce:	0e 94 06 07 	call	0xe0c	; 0xe0c <receiveTwoPasswordsFrom_HMI_ECU>
		samePasswordFlag++;
     cd2:	8b 81       	ldd	r24, Y+3	; 0x03
     cd4:	8f 5f       	subi	r24, 0xFF	; 255
     cd6:	8b 83       	std	Y+3, r24	; 0x03
	}while(NOT_SAME == checkSamePasswords(firstPassword, secondPassword));
     cd8:	ce 01       	movw	r24, r28
     cda:	04 96       	adiw	r24, 0x04	; 4
     cdc:	9e 01       	movw	r18, r28
     cde:	27 5f       	subi	r18, 0xF7	; 247
     ce0:	3f 4f       	sbci	r19, 0xFF	; 255
     ce2:	b9 01       	movw	r22, r18
     ce4:	0e 94 4b 07 	call	0xe96	; 0xe96 <checkSamePasswords>
     ce8:	88 23       	and	r24, r24
     cea:	09 f3       	breq	.-62     	; 0xcae <main+0xbe>

	while(UART_recieveByte() != MC1_READY);
     cec:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <UART_recieveByte>
     cf0:	80 31       	cpi	r24, 0x10	; 16
     cf2:	e1 f7       	brne	.-8      	; 0xcec <main+0xfc>
	UART_sendByte(SAME);
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <UART_sendByte>

	savePasswordInEEPROM(PASSWORD_ADDRESS, firstPassword);
     cfa:	9e 01       	movw	r18, r28
     cfc:	2c 5f       	subi	r18, 0xFC	; 252
     cfe:	3f 4f       	sbci	r19, 0xFF	; 255
     d00:	80 e1       	ldi	r24, 0x10	; 16
     d02:	93 e0       	ldi	r25, 0x03	; 3
     d04:	b9 01       	movw	r22, r18
     d06:	0e 94 80 07 	call	0xf00	; 0xf00 <savePasswordInEEPROM>

	while(1)
	{
		wrongPasswordCounter = 0;
     d0a:	1a 82       	std	Y+2, r1	; 0x02
     d0c:	20 c0       	rjmp	.+64     	; 0xd4e <main+0x15e>
		while(wrongPasswordCounter < MAX_TRIALS)
		{
			receivePasswordFrom_HMI_ECU(doorPassword);
     d0e:	ce 01       	movw	r24, r28
     d10:	0e 96       	adiw	r24, 0x0e	; 14
     d12:	0e 94 25 08 	call	0x104a	; 0x104a <receivePasswordFrom_HMI_ECU>
			if(MATCHED == checkOnPassword(PASSWORD_ADDRESS, doorPassword))
     d16:	9e 01       	movw	r18, r28
     d18:	22 5f       	subi	r18, 0xF2	; 242
     d1a:	3f 4f       	sbci	r19, 0xFF	; 255
     d1c:	80 e1       	ldi	r24, 0x10	; 16
     d1e:	93 e0       	ldi	r25, 0x03	; 3
     d20:	b9 01       	movw	r22, r18
     d22:	0e 94 4e 08 	call	0x109c	; 0x109c <checkOnPassword>
     d26:	81 30       	cpi	r24, 0x01	; 1
     d28:	41 f4       	brne	.+16     	; 0xd3a <main+0x14a>
			{
				while(UART_recieveByte() != MC1_READY);
     d2a:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <UART_recieveByte>
     d2e:	80 31       	cpi	r24, 0x10	; 16
     d30:	e1 f7       	brne	.-8      	; 0xd2a <main+0x13a>
				UART_sendByte(MATCHED);
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <UART_sendByte>
     d38:	0d c0       	rjmp	.+26     	; 0xd54 <main+0x164>
				break;
			}
			else /* NOT_MATCHED */
			{
				while(UART_recieveByte() != MC1_READY);
     d3a:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <UART_recieveByte>
     d3e:	80 31       	cpi	r24, 0x10	; 16
     d40:	e1 f7       	brne	.-8      	; 0xd3a <main+0x14a>
				UART_sendByte(NOT_MATCHED);
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <UART_sendByte>
				wrongPasswordCounter++;
     d48:	8a 81       	ldd	r24, Y+2	; 0x02
     d4a:	8f 5f       	subi	r24, 0xFF	; 255
     d4c:	8a 83       	std	Y+2, r24	; 0x02
	savePasswordInEEPROM(PASSWORD_ADDRESS, firstPassword);

	while(1)
	{
		wrongPasswordCounter = 0;
		while(wrongPasswordCounter < MAX_TRIALS)
     d4e:	8a 81       	ldd	r24, Y+2	; 0x02
     d50:	83 30       	cpi	r24, 0x03	; 3
     d52:	e8 f2       	brcs	.-70     	; 0xd0e <main+0x11e>
				UART_sendByte(NOT_MATCHED);
				wrongPasswordCounter++;
			}
		}

		if(wrongPasswordCounter == MAX_TRIALS)
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	83 30       	cpi	r24, 0x03	; 3
     d58:	91 f4       	brne	.+36     	; 0xd7e <main+0x18e>
		{
			UART_sendByte(MC2_READY);
     d5a:	80 e2       	ldi	r24, 0x20	; 32
     d5c:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <UART_sendByte>
			option = UART_recieveByte();
     d60:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <UART_recieveByte>
     d64:	89 83       	std	Y+1, r24	; 0x01

			if(WRONG_PASSWORD == option)
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	80 35       	cpi	r24, 0x50	; 80
     d6a:	79 f6       	brne	.-98     	; 0xd0a <main+0x11a>
			{
				g_ticks_buzzer = 0;
     d6c:	10 92 75 00 	sts	0x0075, r1
				APP_buzzer();
     d70:	0e 94 51 09 	call	0x12a2	; 0x12a2 <APP_buzzer>
				while(g_ticks_buzzer != BUZZER_FINISHED);
     d74:	80 91 75 00 	lds	r24, 0x0075
     d78:	8a 30       	cpi	r24, 0x0A	; 10
     d7a:	e1 f7       	brne	.-8      	; 0xd74 <main+0x184>
     d7c:	c6 cf       	rjmp	.-116    	; 0xd0a <main+0x11a>
			}
		}
		else
		{
			UART_sendByte(MC2_READY);
     d7e:	80 e2       	ldi	r24, 0x20	; 32
     d80:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <UART_sendByte>
			option = UART_recieveByte();
     d84:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <UART_recieveByte>
     d88:	89 83       	std	Y+1, r24	; 0x01

			if(OPEN_DOOR == option)
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	80 33       	cpi	r24, 0x30	; 48
     d8e:	49 f4       	brne	.+18     	; 0xda2 <main+0x1b2>
			{
				g_ticks_DCMotor = 0;
     d90:	10 92 74 00 	sts	0x0074, r1
				APP_DcMotor();
     d94:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <APP_DcMotor>
				while(g_ticks_DCMotor != DC_MOTOR_FINISHED);
     d98:	80 91 74 00 	lds	r24, 0x0074
     d9c:	87 30       	cpi	r24, 0x07	; 7
     d9e:	e1 f7       	brne	.-8      	; 0xd98 <main+0x1a8>
     da0:	b4 cf       	rjmp	.-152    	; 0xd0a <main+0x11a>
			}
			else if(CHANGE_PASSWORD == option)
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	80 34       	cpi	r24, 0x40	; 64
     da6:	09 f0       	breq	.+2      	; 0xdaa <main+0x1ba>
     da8:	b0 cf       	rjmp	.-160    	; 0xd0a <main+0x11a>
			{
				samePasswordFlag = SAME;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	8b 83       	std	Y+3, r24	; 0x03
				do
				{
					if(samePasswordFlag != SAME)
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	81 30       	cpi	r24, 0x01	; 1
     db2:	39 f0       	breq	.+14     	; 0xdc2 <main+0x1d2>
					{
						while(UART_recieveByte() != MC1_READY);
     db4:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <UART_recieveByte>
     db8:	80 31       	cpi	r24, 0x10	; 16
     dba:	e1 f7       	brne	.-8      	; 0xdb4 <main+0x1c4>
						UART_sendByte(NOT_SAME);
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <UART_sendByte>
					}
					receiveTwoPasswordsFrom_HMI_ECU(firstPassword, secondPassword);
     dc2:	ce 01       	movw	r24, r28
     dc4:	04 96       	adiw	r24, 0x04	; 4
     dc6:	9e 01       	movw	r18, r28
     dc8:	27 5f       	subi	r18, 0xF7	; 247
     dca:	3f 4f       	sbci	r19, 0xFF	; 255
     dcc:	b9 01       	movw	r22, r18
     dce:	0e 94 06 07 	call	0xe0c	; 0xe0c <receiveTwoPasswordsFrom_HMI_ECU>
					samePasswordFlag++;
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	8f 5f       	subi	r24, 0xFF	; 255
     dd6:	8b 83       	std	Y+3, r24	; 0x03
				}while(NOT_SAME == checkSamePasswords(firstPassword, secondPassword));
     dd8:	ce 01       	movw	r24, r28
     dda:	04 96       	adiw	r24, 0x04	; 4
     ddc:	9e 01       	movw	r18, r28
     dde:	27 5f       	subi	r18, 0xF7	; 247
     de0:	3f 4f       	sbci	r19, 0xFF	; 255
     de2:	b9 01       	movw	r22, r18
     de4:	0e 94 4b 07 	call	0xe96	; 0xe96 <checkSamePasswords>
     de8:	88 23       	and	r24, r24
     dea:	09 f3       	breq	.-62     	; 0xdae <main+0x1be>

				while(UART_recieveByte() != MC1_READY);
     dec:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <UART_recieveByte>
     df0:	80 31       	cpi	r24, 0x10	; 16
     df2:	e1 f7       	brne	.-8      	; 0xdec <main+0x1fc>
				UART_sendByte(SAME);
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <UART_sendByte>

				savePasswordInEEPROM(PASSWORD_ADDRESS, firstPassword);
     dfa:	9e 01       	movw	r18, r28
     dfc:	2c 5f       	subi	r18, 0xFC	; 252
     dfe:	3f 4f       	sbci	r19, 0xFF	; 255
     e00:	80 e1       	ldi	r24, 0x10	; 16
     e02:	93 e0       	ldi	r25, 0x03	; 3
     e04:	b9 01       	movw	r22, r18
     e06:	0e 94 80 07 	call	0xf00	; 0xf00 <savePasswordInEEPROM>
     e0a:	7f cf       	rjmp	.-258    	; 0xd0a <main+0x11a>

00000e0c <receiveTwoPasswordsFrom_HMI_ECU>:
/*
 * Description :
 * The function responsible for receiving two passwords from the HMI_ECU through the UART.
 */
void receiveTwoPasswordsFrom_HMI_ECU(uint8 *password_1, uint8 *password_2)
{
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	00 d0       	rcall	.+0      	; 0xe16 <receiveTwoPasswordsFrom_HMI_ECU+0xa>
     e16:	00 d0       	rcall	.+0      	; 0xe18 <receiveTwoPasswordsFrom_HMI_ECU+0xc>
     e18:	0f 92       	push	r0
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	9b 83       	std	Y+3, r25	; 0x03
     e20:	8a 83       	std	Y+2, r24	; 0x02
     e22:	7d 83       	std	Y+5, r23	; 0x05
     e24:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;

	for(i = 0; i < PASSWORD_SIZE; i++)
     e26:	19 82       	std	Y+1, r1	; 0x01
     e28:	12 c0       	rjmp	.+36     	; 0xe4e <receiveTwoPasswordsFrom_HMI_ECU+0x42>
	{
		UART_sendByte(MC2_READY);
     e2a:	80 e2       	ldi	r24, 0x20	; 32
     e2c:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <UART_sendByte>
		password_1[i] = UART_recieveByte();
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	9b 81       	ldd	r25, Y+3	; 0x03
     e3a:	8c 01       	movw	r16, r24
     e3c:	02 0f       	add	r16, r18
     e3e:	13 1f       	adc	r17, r19
     e40:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <UART_recieveByte>
     e44:	f8 01       	movw	r30, r16
     e46:	80 83       	st	Z, r24
 */
void receiveTwoPasswordsFrom_HMI_ECU(uint8 *password_1, uint8 *password_2)
{
	uint8 i;

	for(i = 0; i < PASSWORD_SIZE; i++)
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	8f 5f       	subi	r24, 0xFF	; 255
     e4c:	89 83       	std	Y+1, r24	; 0x01
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	85 30       	cpi	r24, 0x05	; 5
     e52:	58 f3       	brcs	.-42     	; 0xe2a <receiveTwoPasswordsFrom_HMI_ECU+0x1e>
	{
		UART_sendByte(MC2_READY);
		password_1[i] = UART_recieveByte();
	}

	for(i = 0; i < PASSWORD_SIZE; i++)
     e54:	19 82       	std	Y+1, r1	; 0x01
     e56:	12 c0       	rjmp	.+36     	; 0xe7c <receiveTwoPasswordsFrom_HMI_ECU+0x70>
	{
		UART_sendByte(MC2_READY);
     e58:	80 e2       	ldi	r24, 0x20	; 32
     e5a:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <UART_sendByte>
		password_2[i] = UART_recieveByte();
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	8c 81       	ldd	r24, Y+4	; 0x04
     e66:	9d 81       	ldd	r25, Y+5	; 0x05
     e68:	8c 01       	movw	r16, r24
     e6a:	02 0f       	add	r16, r18
     e6c:	13 1f       	adc	r17, r19
     e6e:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <UART_recieveByte>
     e72:	f8 01       	movw	r30, r16
     e74:	80 83       	st	Z, r24
	{
		UART_sendByte(MC2_READY);
		password_1[i] = UART_recieveByte();
	}

	for(i = 0; i < PASSWORD_SIZE; i++)
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	8f 5f       	subi	r24, 0xFF	; 255
     e7a:	89 83       	std	Y+1, r24	; 0x01
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	85 30       	cpi	r24, 0x05	; 5
     e80:	58 f3       	brcs	.-42     	; 0xe58 <receiveTwoPasswordsFrom_HMI_ECU+0x4c>
	{
		UART_sendByte(MC2_READY);
		password_2[i] = UART_recieveByte();
	}
}
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	08 95       	ret

00000e96 <checkSamePasswords>:
/*
 * Description :
 * The function responsible for check if the two passwords are the same or not then respond to the HMI_ECU though the UART.
 */
uint8 checkSamePasswords(uint8 *password_1, uint8 *password_2)
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <checkSamePasswords+0x6>
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <checkSamePasswords+0x8>
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <checkSamePasswords+0xa>
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	9b 83       	std	Y+3, r25	; 0x03
     ea6:	8a 83       	std	Y+2, r24	; 0x02
     ea8:	7d 83       	std	Y+5, r23	; 0x05
     eaa:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i = 0; i < PASSWORD_SIZE; i++)
     eac:	19 82       	std	Y+1, r1	; 0x01
     eae:	19 c0       	rjmp	.+50     	; 0xee2 <checkSamePasswords+0x4c>
	{
		if(password_1[i] != password_2[i])
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	9b 81       	ldd	r25, Y+3	; 0x03
     eba:	fc 01       	movw	r30, r24
     ebc:	e2 0f       	add	r30, r18
     ebe:	f3 1f       	adc	r31, r19
     ec0:	40 81       	ld	r20, Z
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	8c 81       	ldd	r24, Y+4	; 0x04
     eca:	9d 81       	ldd	r25, Y+5	; 0x05
     ecc:	fc 01       	movw	r30, r24
     ece:	e2 0f       	add	r30, r18
     ed0:	f3 1f       	adc	r31, r19
     ed2:	80 81       	ld	r24, Z
     ed4:	48 17       	cp	r20, r24
     ed6:	11 f0       	breq	.+4      	; 0xedc <checkSamePasswords+0x46>
		{
			return NOT_SAME;
     ed8:	1e 82       	std	Y+6, r1	; 0x06
     eda:	08 c0       	rjmp	.+16     	; 0xeec <checkSamePasswords+0x56>
 * The function responsible for check if the two passwords are the same or not then respond to the HMI_ECU though the UART.
 */
uint8 checkSamePasswords(uint8 *password_1, uint8 *password_2)
{
	uint8 i;
	for(i = 0; i < PASSWORD_SIZE; i++)
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	8f 5f       	subi	r24, 0xFF	; 255
     ee0:	89 83       	std	Y+1, r24	; 0x01
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	85 30       	cpi	r24, 0x05	; 5
     ee6:	20 f3       	brcs	.-56     	; 0xeb0 <checkSamePasswords+0x1a>
		if(password_1[i] != password_2[i])
		{
			return NOT_SAME;
		}
	}
	return SAME;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	8e 83       	std	Y+6, r24	; 0x06
     eec:	8e 81       	ldd	r24, Y+6	; 0x06
}
     eee:	26 96       	adiw	r28, 0x06	; 6
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <savePasswordInEEPROM>:
/*
 * Description :
 * The function responsible for saving the password in the EEPROM based on the address passed as a parameter.
 */
void savePasswordInEEPROM(uint16 EEPROM_location, uint8 *password)
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	63 97       	sbiw	r28, 0x13	; 19
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
     f14:	99 8b       	std	Y+17, r25	; 0x11
     f16:	88 8b       	std	Y+16, r24	; 0x10
     f18:	7b 8b       	std	Y+19, r23	; 0x13
     f1a:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i;
	for(i = 0; i < PASSWORD_SIZE; i++)
     f1c:	1f 86       	std	Y+15, r1	; 0x0f
     f1e:	88 c0       	rjmp	.+272    	; 0x1030 <savePasswordInEEPROM+0x130>
	{
		EEPROM_writeByte(EEPROM_location, password[i]);
     f20:	8f 85       	ldd	r24, Y+15	; 0x0f
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	8a 89       	ldd	r24, Y+18	; 0x12
     f28:	9b 89       	ldd	r25, Y+19	; 0x13
     f2a:	fc 01       	movw	r30, r24
     f2c:	e2 0f       	add	r30, r18
     f2e:	f3 1f       	adc	r31, r19
     f30:	20 81       	ld	r18, Z
     f32:	88 89       	ldd	r24, Y+16	; 0x10
     f34:	99 89       	ldd	r25, Y+17	; 0x11
     f36:	62 2f       	mov	r22, r18
     f38:	0e 94 22 0a 	call	0x1444	; 0x1444 <EEPROM_writeByte>
		EEPROM_location += 1;
     f3c:	88 89       	ldd	r24, Y+16	; 0x10
     f3e:	99 89       	ldd	r25, Y+17	; 0x11
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	99 8b       	std	Y+17, r25	; 0x11
     f44:	88 8b       	std	Y+16, r24	; 0x10
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	a0 e2       	ldi	r26, 0x20	; 32
     f4c:	b1 e4       	ldi	r27, 0x41	; 65
     f4e:	8b 87       	std	Y+11, r24	; 0x0b
     f50:	9c 87       	std	Y+12, r25	; 0x0c
     f52:	ad 87       	std	Y+13, r26	; 0x0d
     f54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f56:	6b 85       	ldd	r22, Y+11	; 0x0b
     f58:	7c 85       	ldd	r23, Y+12	; 0x0c
     f5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	4a ef       	ldi	r20, 0xFA	; 250
     f64:	54 e4       	ldi	r21, 0x44	; 68
     f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	8f 83       	std	Y+7, r24	; 0x07
     f70:	98 87       	std	Y+8, r25	; 0x08
     f72:	a9 87       	std	Y+9, r26	; 0x09
     f74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f76:	6f 81       	ldd	r22, Y+7	; 0x07
     f78:	78 85       	ldd	r23, Y+8	; 0x08
     f7a:	89 85       	ldd	r24, Y+9	; 0x09
     f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	40 e8       	ldi	r20, 0x80	; 128
     f84:	5f e3       	ldi	r21, 0x3F	; 63
     f86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f8a:	88 23       	and	r24, r24
     f8c:	2c f4       	brge	.+10     	; 0xf98 <savePasswordInEEPROM+0x98>
		__ticks = 1;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	9e 83       	std	Y+6, r25	; 0x06
     f94:	8d 83       	std	Y+5, r24	; 0x05
     f96:	3f c0       	rjmp	.+126    	; 0x1016 <savePasswordInEEPROM+0x116>
	else if (__tmp > 65535)
     f98:	6f 81       	ldd	r22, Y+7	; 0x07
     f9a:	78 85       	ldd	r23, Y+8	; 0x08
     f9c:	89 85       	ldd	r24, Y+9	; 0x09
     f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	3f ef       	ldi	r19, 0xFF	; 255
     fa4:	4f e7       	ldi	r20, 0x7F	; 127
     fa6:	57 e4       	ldi	r21, 0x47	; 71
     fa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fac:	18 16       	cp	r1, r24
     fae:	4c f5       	brge	.+82     	; 0x1002 <savePasswordInEEPROM+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fb2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e2       	ldi	r20, 0x20	; 32
     fbe:	51 e4       	ldi	r21, 0x41	; 65
     fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	bc 01       	movw	r22, r24
     fca:	cd 01       	movw	r24, r26
     fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	9e 83       	std	Y+6, r25	; 0x06
     fd6:	8d 83       	std	Y+5, r24	; 0x05
     fd8:	0f c0       	rjmp	.+30     	; 0xff8 <savePasswordInEEPROM+0xf8>
     fda:	88 ec       	ldi	r24, 0xC8	; 200
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	9c 83       	std	Y+4, r25	; 0x04
     fe0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	9c 81       	ldd	r25, Y+4	; 0x04
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	f1 f7       	brne	.-4      	; 0xfe6 <savePasswordInEEPROM+0xe6>
     fea:	9c 83       	std	Y+4, r25	; 0x04
     fec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fee:	8d 81       	ldd	r24, Y+5	; 0x05
     ff0:	9e 81       	ldd	r25, Y+6	; 0x06
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	9e 83       	std	Y+6, r25	; 0x06
     ff6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff8:	8d 81       	ldd	r24, Y+5	; 0x05
     ffa:	9e 81       	ldd	r25, Y+6	; 0x06
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	69 f7       	brne	.-38     	; 0xfda <savePasswordInEEPROM+0xda>
    1000:	14 c0       	rjmp	.+40     	; 0x102a <savePasswordInEEPROM+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1002:	6f 81       	ldd	r22, Y+7	; 0x07
    1004:	78 85       	ldd	r23, Y+8	; 0x08
    1006:	89 85       	ldd	r24, Y+9	; 0x09
    1008:	9a 85       	ldd	r25, Y+10	; 0x0a
    100a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	9e 83       	std	Y+6, r25	; 0x06
    1014:	8d 83       	std	Y+5, r24	; 0x05
    1016:	8d 81       	ldd	r24, Y+5	; 0x05
    1018:	9e 81       	ldd	r25, Y+6	; 0x06
    101a:	9a 83       	std	Y+2, r25	; 0x02
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	9a 81       	ldd	r25, Y+2	; 0x02
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	f1 f7       	brne	.-4      	; 0x1022 <savePasswordInEEPROM+0x122>
    1026:	9a 83       	std	Y+2, r25	; 0x02
    1028:	89 83       	std	Y+1, r24	; 0x01
 * The function responsible for saving the password in the EEPROM based on the address passed as a parameter.
 */
void savePasswordInEEPROM(uint16 EEPROM_location, uint8 *password)
{
	uint8 i;
	for(i = 0; i < PASSWORD_SIZE; i++)
    102a:	8f 85       	ldd	r24, Y+15	; 0x0f
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	8f 87       	std	Y+15, r24	; 0x0f
    1030:	8f 85       	ldd	r24, Y+15	; 0x0f
    1032:	85 30       	cpi	r24, 0x05	; 5
    1034:	08 f4       	brcc	.+2      	; 0x1038 <savePasswordInEEPROM+0x138>
    1036:	74 cf       	rjmp	.-280    	; 0xf20 <savePasswordInEEPROM+0x20>
	{
		EEPROM_writeByte(EEPROM_location, password[i]);
		EEPROM_location += 1;
		_delay_ms(10);
	}
}
    1038:	63 96       	adiw	r28, 0x13	; 19
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <receivePasswordFrom_HMI_ECU>:
/*
 * Description :
 * The function responsible for receiving the password from the HMI_ECU through the UART.
 */
void receivePasswordFrom_HMI_ECU(uint8 *password)
{
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	00 d0       	rcall	.+0      	; 0x1054 <receivePasswordFrom_HMI_ECU+0xa>
    1054:	0f 92       	push	r0
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	9b 83       	std	Y+3, r25	; 0x03
    105c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i = 0; i < PASSWORD_SIZE; i++)
    105e:	19 82       	std	Y+1, r1	; 0x01
    1060:	12 c0       	rjmp	.+36     	; 0x1086 <receivePasswordFrom_HMI_ECU+0x3c>
	{
		UART_sendByte(MC2_READY);
    1062:	80 e2       	ldi	r24, 0x20	; 32
    1064:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <UART_sendByte>
		password[i] = UART_recieveByte();
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	9b 81       	ldd	r25, Y+3	; 0x03
    1072:	8c 01       	movw	r16, r24
    1074:	02 0f       	add	r16, r18
    1076:	13 1f       	adc	r17, r19
    1078:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <UART_recieveByte>
    107c:	f8 01       	movw	r30, r16
    107e:	80 83       	st	Z, r24
 * The function responsible for receiving the password from the HMI_ECU through the UART.
 */
void receivePasswordFrom_HMI_ECU(uint8 *password)
{
	uint8 i;
	for(i = 0; i < PASSWORD_SIZE; i++)
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	8f 5f       	subi	r24, 0xFF	; 255
    1084:	89 83       	std	Y+1, r24	; 0x01
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	85 30       	cpi	r24, 0x05	; 5
    108a:	58 f3       	brcs	.-42     	; 0x1062 <receivePasswordFrom_HMI_ECU+0x18>
	{
		UART_sendByte(MC2_READY);
		password[i] = UART_recieveByte();
	}
}
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	1f 91       	pop	r17
    1098:	0f 91       	pop	r16
    109a:	08 95       	ret

0000109c <checkOnPassword>:
 * Description :
 * The function responsible for checking if the password matches the one saved in the EEPROM or not
 * then responds to the HMI_ECU through the UART.
 */
uint8 checkOnPassword(uint16 EEPROM_location, uint8 *HMI_password)
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	2b 97       	sbiw	r28, 0x0b	; 11
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	98 87       	std	Y+8, r25	; 0x08
    10b2:	8f 83       	std	Y+7, r24	; 0x07
    10b4:	7a 87       	std	Y+10, r23	; 0x0a
    10b6:	69 87       	std	Y+9, r22	; 0x09
	uint8 i;
	uint8 savedPassword[5];

	for(i = 0; i < PASSWORD_SIZE; i++)
    10b8:	19 82       	std	Y+1, r1	; 0x01
    10ba:	15 c0       	rjmp	.+42     	; 0x10e6 <checkOnPassword+0x4a>
	{
		EEPROM_readByte(EEPROM_location, savedPassword+i);
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	9e 01       	movw	r18, r28
    10c4:	2e 5f       	subi	r18, 0xFE	; 254
    10c6:	3f 4f       	sbci	r19, 0xFF	; 255
    10c8:	28 0f       	add	r18, r24
    10ca:	39 1f       	adc	r19, r25
    10cc:	8f 81       	ldd	r24, Y+7	; 0x07
    10ce:	98 85       	ldd	r25, Y+8	; 0x08
    10d0:	b9 01       	movw	r22, r18
    10d2:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <EEPROM_readByte>
		EEPROM_location += 1;
    10d6:	8f 81       	ldd	r24, Y+7	; 0x07
    10d8:	98 85       	ldd	r25, Y+8	; 0x08
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	98 87       	std	Y+8, r25	; 0x08
    10de:	8f 83       	std	Y+7, r24	; 0x07
uint8 checkOnPassword(uint16 EEPROM_location, uint8 *HMI_password)
{
	uint8 i;
	uint8 savedPassword[5];

	for(i = 0; i < PASSWORD_SIZE; i++)
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	8f 5f       	subi	r24, 0xFF	; 255
    10e4:	89 83       	std	Y+1, r24	; 0x01
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	85 30       	cpi	r24, 0x05	; 5
    10ea:	40 f3       	brcs	.-48     	; 0x10bc <checkOnPassword+0x20>
	{
		EEPROM_readByte(EEPROM_location, savedPassword+i);
		EEPROM_location += 1;
	}

	for(i = 0; i < PASSWORD_SIZE; i++)
    10ec:	19 82       	std	Y+1, r1	; 0x01
    10ee:	19 c0       	rjmp	.+50     	; 0x1122 <checkOnPassword+0x86>
	{
		if(HMI_password[i] != savedPassword[i])
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	89 85       	ldd	r24, Y+9	; 0x09
    10f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fa:	fc 01       	movw	r30, r24
    10fc:	e2 0f       	add	r30, r18
    10fe:	f3 1f       	adc	r31, r19
    1100:	40 81       	ld	r20, Z
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	ce 01       	movw	r24, r28
    110a:	02 96       	adiw	r24, 0x02	; 2
    110c:	fc 01       	movw	r30, r24
    110e:	e2 0f       	add	r30, r18
    1110:	f3 1f       	adc	r31, r19
    1112:	80 81       	ld	r24, Z
    1114:	48 17       	cp	r20, r24
    1116:	11 f0       	breq	.+4      	; 0x111c <checkOnPassword+0x80>
		{
			return NOT_MATCHED;
    1118:	1b 86       	std	Y+11, r1	; 0x0b
    111a:	08 c0       	rjmp	.+16     	; 0x112c <checkOnPassword+0x90>
	{
		EEPROM_readByte(EEPROM_location, savedPassword+i);
		EEPROM_location += 1;
	}

	for(i = 0; i < PASSWORD_SIZE; i++)
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	8f 5f       	subi	r24, 0xFF	; 255
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	85 30       	cpi	r24, 0x05	; 5
    1126:	20 f3       	brcs	.-56     	; 0x10f0 <checkOnPassword+0x54>
		if(HMI_password[i] != savedPassword[i])
		{
			return NOT_MATCHED;
		}
	}
	return MATCHED;
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	8b 87       	std	Y+11, r24	; 0x0b
    112c:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    112e:	2b 96       	adiw	r28, 0x0b	; 11
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <startTimer1>:
 * Description :
 * The function responsible for starting Timer1 based on the configurations passed as parameters
 * and pass the address of the call-back function.
 */
void startTimer1(uint16 TCNT_value, uint16 OCR_value, Timer1_Prescaler prescaler, Timer1_Mode mode, void(*callBackFunctionAddress)(void))
{
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	2e 97       	sbiw	r28, 0x0e	; 14
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	98 87       	std	Y+8, r25	; 0x08
    115a:	8f 83       	std	Y+7, r24	; 0x07
    115c:	7a 87       	std	Y+10, r23	; 0x0a
    115e:	69 87       	std	Y+9, r22	; 0x09
    1160:	4b 87       	std	Y+11, r20	; 0x0b
    1162:	2c 87       	std	Y+12, r18	; 0x0c
    1164:	1e 87       	std	Y+14, r17	; 0x0e
    1166:	0d 87       	std	Y+13, r16	; 0x0d
	Timer1_ConfigType Timer1_Configuration;

	Timer1_Configuration.initial_value = TCNT_value;
    1168:	8f 81       	ldd	r24, Y+7	; 0x07
    116a:	98 85       	ldd	r25, Y+8	; 0x08
    116c:	9a 83       	std	Y+2, r25	; 0x02
    116e:	89 83       	std	Y+1, r24	; 0x01
	Timer1_Configuration.compare_value = OCR_value; // 62500 = 8 seconds //54687 == 7 seconds
    1170:	89 85       	ldd	r24, Y+9	; 0x09
    1172:	9a 85       	ldd	r25, Y+10	; 0x0a
    1174:	9c 83       	std	Y+4, r25	; 0x04
    1176:	8b 83       	std	Y+3, r24	; 0x03
	Timer1_Configuration.prescaler = prescaler;
    1178:	8b 85       	ldd	r24, Y+11	; 0x0b
    117a:	8d 83       	std	Y+5, r24	; 0x05
	Timer1_Configuration.mode = mode;
    117c:	8c 85       	ldd	r24, Y+12	; 0x0c
    117e:	8e 83       	std	Y+6, r24	; 0x06

	Timer1_setCallBack(callBackFunctionAddress);
    1180:	8d 85       	ldd	r24, Y+13	; 0x0d
    1182:	9e 85       	ldd	r25, Y+14	; 0x0e
    1184:	0e 94 12 14 	call	0x2824	; 0x2824 <Timer1_setCallBack>
	Timer1_init(&Timer1_Configuration);
    1188:	ce 01       	movw	r24, r28
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Timer1_init>
}
    1190:	2e 96       	adiw	r28, 0x0e	; 14
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	08 95       	ret

000011a6 <APP_DcMotor>:
 * Description :
 * The function responsible for rotating the DC-Motor clockwise for 15-seconds
 * then holding it for 3-seconds then rotating the DC-Motor anti-clockwise.
 */
void APP_DcMotor(void)
{
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
	g_ticks_DCMotor++;
    11b2:	80 91 74 00 	lds	r24, 0x0074
    11b6:	8f 5f       	subi	r24, 0xFF	; 255
    11b8:	80 93 74 00 	sts	0x0074, r24

	if(g_ticks_DCMotor == 1)
    11bc:	80 91 74 00 	lds	r24, 0x0074
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	91 f4       	brne	.+36     	; 0x11e8 <APP_DcMotor+0x42>
	{
		Timer1_deInit();
    11c4:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Timer1_deInit>
		startTimer1(0x00, 62500, F_CPU_DIVIDE_1024, CTC_OCR1A, APP_DcMotor);  // 62500 = 8 seconds
    11c8:	e3 ed       	ldi	r30, 0xD3	; 211
    11ca:	f8 e0       	ldi	r31, 0x08	; 8
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	64 e2       	ldi	r22, 0x24	; 36
    11d2:	74 ef       	ldi	r23, 0xF4	; 244
    11d4:	45 e0       	ldi	r20, 0x05	; 5
    11d6:	24 e0       	ldi	r18, 0x04	; 4
    11d8:	8f 01       	movw	r16, r30
    11da:	0e 94 a0 08 	call	0x1140	; 0x1140 <startTimer1>
		DcMotor_Rotate(CLOCKWISE, 100);
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	64 e6       	ldi	r22, 0x64	; 100
    11e2:	0e 94 be 05 	call	0xb7c	; 0xb7c <DcMotor_Rotate>
    11e6:	58 c0       	rjmp	.+176    	; 0x1298 <APP_DcMotor+0xf2>
	}
	else if(g_ticks_DCMotor == 2)
    11e8:	80 91 74 00 	lds	r24, 0x0074
    11ec:	82 30       	cpi	r24, 0x02	; 2
    11ee:	71 f4       	brne	.+28     	; 0x120c <APP_DcMotor+0x66>
	{
		Timer1_deInit();
    11f0:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Timer1_deInit>
		startTimer1(0x00, 54687, F_CPU_DIVIDE_1024, CTC_OCR1A, APP_DcMotor);  //54687 == 7 seconds
    11f4:	e3 ed       	ldi	r30, 0xD3	; 211
    11f6:	f8 e0       	ldi	r31, 0x08	; 8
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	6f e9       	ldi	r22, 0x9F	; 159
    11fe:	75 ed       	ldi	r23, 0xD5	; 213
    1200:	45 e0       	ldi	r20, 0x05	; 5
    1202:	24 e0       	ldi	r18, 0x04	; 4
    1204:	8f 01       	movw	r16, r30
    1206:	0e 94 a0 08 	call	0x1140	; 0x1140 <startTimer1>
    120a:	46 c0       	rjmp	.+140    	; 0x1298 <APP_DcMotor+0xf2>
	}
	else if(g_ticks_DCMotor == 3)
    120c:	80 91 74 00 	lds	r24, 0x0074
    1210:	83 30       	cpi	r24, 0x03	; 3
    1212:	91 f4       	brne	.+36     	; 0x1238 <APP_DcMotor+0x92>
	{
		Timer1_deInit();
    1214:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Timer1_deInit>
		startTimer1(0x00, 23437, F_CPU_DIVIDE_1024, CTC_OCR1A, APP_DcMotor);  //23437 == 3 seconds
    1218:	e3 ed       	ldi	r30, 0xD3	; 211
    121a:	f8 e0       	ldi	r31, 0x08	; 8
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	6d e8       	ldi	r22, 0x8D	; 141
    1222:	7b e5       	ldi	r23, 0x5B	; 91
    1224:	45 e0       	ldi	r20, 0x05	; 5
    1226:	24 e0       	ldi	r18, 0x04	; 4
    1228:	8f 01       	movw	r16, r30
    122a:	0e 94 a0 08 	call	0x1140	; 0x1140 <startTimer1>
		DcMotor_Rotate(STOP, 100);
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	64 e6       	ldi	r22, 0x64	; 100
    1232:	0e 94 be 05 	call	0xb7c	; 0xb7c <DcMotor_Rotate>
    1236:	30 c0       	rjmp	.+96     	; 0x1298 <APP_DcMotor+0xf2>
	}
	else if(g_ticks_DCMotor == 4)
    1238:	80 91 74 00 	lds	r24, 0x0074
    123c:	84 30       	cpi	r24, 0x04	; 4
    123e:	81 f4       	brne	.+32     	; 0x1260 <APP_DcMotor+0xba>
	{
		startTimer1(0x00, 62500, F_CPU_DIVIDE_1024, CTC_OCR1A, APP_DcMotor);  // 62500 = 8 seconds
    1240:	e3 ed       	ldi	r30, 0xD3	; 211
    1242:	f8 e0       	ldi	r31, 0x08	; 8
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	64 e2       	ldi	r22, 0x24	; 36
    124a:	74 ef       	ldi	r23, 0xF4	; 244
    124c:	45 e0       	ldi	r20, 0x05	; 5
    124e:	24 e0       	ldi	r18, 0x04	; 4
    1250:	8f 01       	movw	r16, r30
    1252:	0e 94 a0 08 	call	0x1140	; 0x1140 <startTimer1>
		DcMotor_Rotate(ANTI_CLOCKWISE, 100);
    1256:	82 e0       	ldi	r24, 0x02	; 2
    1258:	64 e6       	ldi	r22, 0x64	; 100
    125a:	0e 94 be 05 	call	0xb7c	; 0xb7c <DcMotor_Rotate>
    125e:	1c c0       	rjmp	.+56     	; 0x1298 <APP_DcMotor+0xf2>
	}
	else if(g_ticks_DCMotor == 5)
    1260:	80 91 74 00 	lds	r24, 0x0074
    1264:	85 30       	cpi	r24, 0x05	; 5
    1266:	71 f4       	brne	.+28     	; 0x1284 <APP_DcMotor+0xde>
	{
		Timer1_deInit();
    1268:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Timer1_deInit>
		startTimer1(0x00, 54687, F_CPU_DIVIDE_1024, CTC_OCR1A, APP_DcMotor);  //54687 == 7 seconds
    126c:	e3 ed       	ldi	r30, 0xD3	; 211
    126e:	f8 e0       	ldi	r31, 0x08	; 8
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	6f e9       	ldi	r22, 0x9F	; 159
    1276:	75 ed       	ldi	r23, 0xD5	; 213
    1278:	45 e0       	ldi	r20, 0x05	; 5
    127a:	24 e0       	ldi	r18, 0x04	; 4
    127c:	8f 01       	movw	r16, r30
    127e:	0e 94 a0 08 	call	0x1140	; 0x1140 <startTimer1>
    1282:	0a c0       	rjmp	.+20     	; 0x1298 <APP_DcMotor+0xf2>
	}
	else if(g_ticks_DCMotor == 6)
    1284:	80 91 74 00 	lds	r24, 0x0074
    1288:	86 30       	cpi	r24, 0x06	; 6
    128a:	31 f4       	brne	.+12     	; 0x1298 <APP_DcMotor+0xf2>
	{
		DcMotor_Rotate(STOP, 100);
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	64 e6       	ldi	r22, 0x64	; 100
    1290:	0e 94 be 05 	call	0xb7c	; 0xb7c <DcMotor_Rotate>
		Timer1_deInit();
    1294:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Timer1_deInit>
	}
}
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	1f 91       	pop	r17
    129e:	0f 91       	pop	r16
    12a0:	08 95       	ret

000012a2 <APP_buzzer>:
/*
 * Description :
 * The function responsible for activation the buzzer for 1-minute.
 */
void APP_buzzer(void)
{
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
	g_ticks_buzzer++;
    12ae:	80 91 75 00 	lds	r24, 0x0075
    12b2:	8f 5f       	subi	r24, 0xFF	; 255
    12b4:	80 93 75 00 	sts	0x0075, r24

	if(g_ticks_buzzer == 1)
    12b8:	80 91 75 00 	lds	r24, 0x0075
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	81 f4       	brne	.+32     	; 0x12e0 <APP_buzzer+0x3e>
	{
		Buzzer_on();
    12c0:	0e 94 0a 0a 	call	0x1414	; 0x1414 <Buzzer_on>
		Timer1_deInit();
    12c4:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Timer1_deInit>
		startTimer1(0x00, 62500, F_CPU_DIVIDE_1024, CTC_OCR1A, APP_buzzer);  // 62500 = 8 seconds
    12c8:	e1 e5       	ldi	r30, 0x51	; 81
    12ca:	f9 e0       	ldi	r31, 0x09	; 9
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	64 e2       	ldi	r22, 0x24	; 36
    12d2:	74 ef       	ldi	r23, 0xF4	; 244
    12d4:	45 e0       	ldi	r20, 0x05	; 5
    12d6:	24 e0       	ldi	r18, 0x04	; 4
    12d8:	8f 01       	movw	r16, r30
    12da:	0e 94 a0 08 	call	0x1140	; 0x1140 <startTimer1>
    12de:	84 c0       	rjmp	.+264    	; 0x13e8 <APP_buzzer+0x146>
	}
	else if(g_ticks_buzzer == 2)
    12e0:	80 91 75 00 	lds	r24, 0x0075
    12e4:	82 30       	cpi	r24, 0x02	; 2
    12e6:	71 f4       	brne	.+28     	; 0x1304 <APP_buzzer+0x62>
	{
		Timer1_deInit();
    12e8:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Timer1_deInit>
		startTimer1(0x00, 62500, F_CPU_DIVIDE_1024, CTC_OCR1A, APP_buzzer);  // 62500 = 8 seconds
    12ec:	e1 e5       	ldi	r30, 0x51	; 81
    12ee:	f9 e0       	ldi	r31, 0x09	; 9
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	64 e2       	ldi	r22, 0x24	; 36
    12f6:	74 ef       	ldi	r23, 0xF4	; 244
    12f8:	45 e0       	ldi	r20, 0x05	; 5
    12fa:	24 e0       	ldi	r18, 0x04	; 4
    12fc:	8f 01       	movw	r16, r30
    12fe:	0e 94 a0 08 	call	0x1140	; 0x1140 <startTimer1>
    1302:	72 c0       	rjmp	.+228    	; 0x13e8 <APP_buzzer+0x146>
	}
	else if(g_ticks_buzzer == 3)
    1304:	80 91 75 00 	lds	r24, 0x0075
    1308:	83 30       	cpi	r24, 0x03	; 3
    130a:	71 f4       	brne	.+28     	; 0x1328 <APP_buzzer+0x86>
	{
		Timer1_deInit();
    130c:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Timer1_deInit>
		startTimer1(0x00, 62500, F_CPU_DIVIDE_1024, CTC_OCR1A, APP_buzzer);  // 62500 = 8 seconds
    1310:	e1 e5       	ldi	r30, 0x51	; 81
    1312:	f9 e0       	ldi	r31, 0x09	; 9
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	64 e2       	ldi	r22, 0x24	; 36
    131a:	74 ef       	ldi	r23, 0xF4	; 244
    131c:	45 e0       	ldi	r20, 0x05	; 5
    131e:	24 e0       	ldi	r18, 0x04	; 4
    1320:	8f 01       	movw	r16, r30
    1322:	0e 94 a0 08 	call	0x1140	; 0x1140 <startTimer1>
    1326:	60 c0       	rjmp	.+192    	; 0x13e8 <APP_buzzer+0x146>
	}
	else if(g_ticks_buzzer == 4)
    1328:	80 91 75 00 	lds	r24, 0x0075
    132c:	84 30       	cpi	r24, 0x04	; 4
    132e:	71 f4       	brne	.+28     	; 0x134c <APP_buzzer+0xaa>
	{
		Timer1_deInit();
    1330:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Timer1_deInit>
		startTimer1(0x00, 62500, F_CPU_DIVIDE_1024, CTC_OCR1A, APP_buzzer);  // 62500 = 8 seconds
    1334:	e1 e5       	ldi	r30, 0x51	; 81
    1336:	f9 e0       	ldi	r31, 0x09	; 9
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	64 e2       	ldi	r22, 0x24	; 36
    133e:	74 ef       	ldi	r23, 0xF4	; 244
    1340:	45 e0       	ldi	r20, 0x05	; 5
    1342:	24 e0       	ldi	r18, 0x04	; 4
    1344:	8f 01       	movw	r16, r30
    1346:	0e 94 a0 08 	call	0x1140	; 0x1140 <startTimer1>
    134a:	4e c0       	rjmp	.+156    	; 0x13e8 <APP_buzzer+0x146>
	}
	else if(g_ticks_buzzer == 5)
    134c:	80 91 75 00 	lds	r24, 0x0075
    1350:	85 30       	cpi	r24, 0x05	; 5
    1352:	71 f4       	brne	.+28     	; 0x1370 <APP_buzzer+0xce>
	{
		Timer1_deInit();
    1354:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Timer1_deInit>
		startTimer1(0x00, 62500, F_CPU_DIVIDE_1024, CTC_OCR1A, APP_buzzer);  // 62500 = 8 seconds
    1358:	e1 e5       	ldi	r30, 0x51	; 81
    135a:	f9 e0       	ldi	r31, 0x09	; 9
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	64 e2       	ldi	r22, 0x24	; 36
    1362:	74 ef       	ldi	r23, 0xF4	; 244
    1364:	45 e0       	ldi	r20, 0x05	; 5
    1366:	24 e0       	ldi	r18, 0x04	; 4
    1368:	8f 01       	movw	r16, r30
    136a:	0e 94 a0 08 	call	0x1140	; 0x1140 <startTimer1>
    136e:	3c c0       	rjmp	.+120    	; 0x13e8 <APP_buzzer+0x146>
	}
	else if(g_ticks_buzzer == 6)
    1370:	80 91 75 00 	lds	r24, 0x0075
    1374:	86 30       	cpi	r24, 0x06	; 6
    1376:	71 f4       	brne	.+28     	; 0x1394 <APP_buzzer+0xf2>
	{
		Timer1_deInit();
    1378:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Timer1_deInit>
		startTimer1(0x00, 62500, F_CPU_DIVIDE_1024, CTC_OCR1A, APP_buzzer);  // 62500 = 8 seconds
    137c:	e1 e5       	ldi	r30, 0x51	; 81
    137e:	f9 e0       	ldi	r31, 0x09	; 9
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	64 e2       	ldi	r22, 0x24	; 36
    1386:	74 ef       	ldi	r23, 0xF4	; 244
    1388:	45 e0       	ldi	r20, 0x05	; 5
    138a:	24 e0       	ldi	r18, 0x04	; 4
    138c:	8f 01       	movw	r16, r30
    138e:	0e 94 a0 08 	call	0x1140	; 0x1140 <startTimer1>
    1392:	2a c0       	rjmp	.+84     	; 0x13e8 <APP_buzzer+0x146>
	}
	else if(g_ticks_buzzer == 7)
    1394:	80 91 75 00 	lds	r24, 0x0075
    1398:	87 30       	cpi	r24, 0x07	; 7
    139a:	71 f4       	brne	.+28     	; 0x13b8 <APP_buzzer+0x116>
	{
		Timer1_deInit();
    139c:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Timer1_deInit>
		startTimer1(0x00, 62500, F_CPU_DIVIDE_1024, CTC_OCR1A, APP_buzzer);  // 62500 = 8 seconds
    13a0:	e1 e5       	ldi	r30, 0x51	; 81
    13a2:	f9 e0       	ldi	r31, 0x09	; 9
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	64 e2       	ldi	r22, 0x24	; 36
    13aa:	74 ef       	ldi	r23, 0xF4	; 244
    13ac:	45 e0       	ldi	r20, 0x05	; 5
    13ae:	24 e0       	ldi	r18, 0x04	; 4
    13b0:	8f 01       	movw	r16, r30
    13b2:	0e 94 a0 08 	call	0x1140	; 0x1140 <startTimer1>
    13b6:	18 c0       	rjmp	.+48     	; 0x13e8 <APP_buzzer+0x146>
	}
	else if(g_ticks_buzzer == 8)
    13b8:	80 91 75 00 	lds	r24, 0x0075
    13bc:	88 30       	cpi	r24, 0x08	; 8
    13be:	71 f4       	brne	.+28     	; 0x13dc <APP_buzzer+0x13a>
	{
		Timer1_deInit();
    13c0:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Timer1_deInit>
		startTimer1(0x00, 3125, F_CPU_DIVIDE_1024, CTC_OCR1A, APP_buzzer);  // 3125 = 4 seconds
    13c4:	e1 e5       	ldi	r30, 0x51	; 81
    13c6:	f9 e0       	ldi	r31, 0x09	; 9
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	65 e3       	ldi	r22, 0x35	; 53
    13ce:	7c e0       	ldi	r23, 0x0C	; 12
    13d0:	45 e0       	ldi	r20, 0x05	; 5
    13d2:	24 e0       	ldi	r18, 0x04	; 4
    13d4:	8f 01       	movw	r16, r30
    13d6:	0e 94 a0 08 	call	0x1140	; 0x1140 <startTimer1>
    13da:	06 c0       	rjmp	.+12     	; 0x13e8 <APP_buzzer+0x146>
	}
	else if(g_ticks_buzzer == 9)
    13dc:	80 91 75 00 	lds	r24, 0x0075
    13e0:	89 30       	cpi	r24, 0x09	; 9
    13e2:	11 f4       	brne	.+4      	; 0x13e8 <APP_buzzer+0x146>
	{
		Buzzer_off();
    13e4:	0e 94 16 0a 	call	0x142c	; 0x142c <Buzzer_off>
	}
}
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	1f 91       	pop	r17
    13ee:	0f 91       	pop	r16
    13f0:	08 95       	ret

000013f2 <Buzzer_init>:
 * Initialize the Buzzer:
 * 1. Setup the direction for the buzzer pin as output pin through the GPIO driver.
 * 2. Turn off the buzzer through the GPIO.
 */
void Buzzer_init(void)
{
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    13fa:	82 e0       	ldi	r24, 0x02	; 2
    13fc:	64 e0       	ldi	r22, 0x04	; 4
    13fe:	41 e0       	ldi	r20, 0x01	; 1
    1400:	0e 94 c3 0a 	call	0x1586	; 0x1586 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1404:	82 e0       	ldi	r24, 0x02	; 2
    1406:	64 e0       	ldi	r22, 0x04	; 4
    1408:	40 e0       	ldi	r20, 0x00	; 0
    140a:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_writePin>
}
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <Buzzer_on>:
/*
 * Description :
 * Function to enable the Buzzer through the GPIO.
 */
void Buzzer_on(void)
{
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	64 e0       	ldi	r22, 0x04	; 4
    1420:	41 e0       	ldi	r20, 0x01	; 1
    1422:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_writePin>
}
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <Buzzer_off>:
/*
 * Description :
 * Function to disable the Buzzer through the GPIO
 */
void Buzzer_off(void)
{
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1434:	82 e0       	ldi	r24, 0x02	; 2
    1436:	64 e0       	ldi	r22, 0x04	; 4
    1438:	40 e0       	ldi	r20, 0x00	; 0
    143a:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_writePin>
}
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	00 d0       	rcall	.+0      	; 0x144a <EEPROM_writeByte+0x6>
    144a:	00 d0       	rcall	.+0      	; 0x144c <EEPROM_writeByte+0x8>
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	9a 83       	std	Y+2, r25	; 0x02
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1456:	0e 94 48 14 	call	0x2890	; 0x2890 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    145a:	0e 94 a0 14 	call	0x2940	; 0x2940 <TWI_getStatus>
    145e:	88 30       	cpi	r24, 0x08	; 8
    1460:	11 f0       	breq	.+4      	; 0x1466 <EEPROM_writeByte+0x22>
        return ERROR;
    1462:	1c 82       	std	Y+4, r1	; 0x04
    1464:	28 c0       	rjmp	.+80     	; 0x14b6 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	9a 81       	ldd	r25, Y+2	; 0x02
    146a:	80 70       	andi	r24, 0x00	; 0
    146c:	97 70       	andi	r25, 0x07	; 7
    146e:	88 0f       	add	r24, r24
    1470:	89 2f       	mov	r24, r25
    1472:	88 1f       	adc	r24, r24
    1474:	99 0b       	sbc	r25, r25
    1476:	91 95       	neg	r25
    1478:	80 6a       	ori	r24, 0xA0	; 160
    147a:	0e 94 63 14 	call	0x28c6	; 0x28c6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    147e:	0e 94 a0 14 	call	0x2940	; 0x2940 <TWI_getStatus>
    1482:	88 31       	cpi	r24, 0x18	; 24
    1484:	11 f0       	breq	.+4      	; 0x148a <EEPROM_writeByte+0x46>
        return ERROR; 
    1486:	1c 82       	std	Y+4, r1	; 0x04
    1488:	16 c0       	rjmp	.+44     	; 0x14b6 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	0e 94 63 14 	call	0x28c6	; 0x28c6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1490:	0e 94 a0 14 	call	0x2940	; 0x2940 <TWI_getStatus>
    1494:	88 32       	cpi	r24, 0x28	; 40
    1496:	11 f0       	breq	.+4      	; 0x149c <EEPROM_writeByte+0x58>
        return ERROR;
    1498:	1c 82       	std	Y+4, r1	; 0x04
    149a:	0d c0       	rjmp	.+26     	; 0x14b6 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	0e 94 63 14 	call	0x28c6	; 0x28c6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    14a2:	0e 94 a0 14 	call	0x2940	; 0x2940 <TWI_getStatus>
    14a6:	88 32       	cpi	r24, 0x28	; 40
    14a8:	11 f0       	breq	.+4      	; 0x14ae <EEPROM_writeByte+0x6a>
        return ERROR;
    14aa:	1c 82       	std	Y+4, r1	; 0x04
    14ac:	04 c0       	rjmp	.+8      	; 0x14b6 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    14ae:	0e 94 58 14 	call	0x28b0	; 0x28b0 <TWI_stop>
	
    return SUCCESS;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	8c 83       	std	Y+4, r24	; 0x04
    14b6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <EEPROM_readByte+0x6>
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <EEPROM_readByte+0x8>
    14ce:	0f 92       	push	r0
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	9a 83       	std	Y+2, r25	; 0x02
    14d6:	89 83       	std	Y+1, r24	; 0x01
    14d8:	7c 83       	std	Y+4, r23	; 0x04
    14da:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    14dc:	0e 94 48 14 	call	0x2890	; 0x2890 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    14e0:	0e 94 a0 14 	call	0x2940	; 0x2940 <TWI_getStatus>
    14e4:	88 30       	cpi	r24, 0x08	; 8
    14e6:	11 f0       	breq	.+4      	; 0x14ec <EEPROM_readByte+0x26>
        return ERROR;
    14e8:	1d 82       	std	Y+5, r1	; 0x05
    14ea:	44 c0       	rjmp	.+136    	; 0x1574 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	9a 81       	ldd	r25, Y+2	; 0x02
    14f0:	80 70       	andi	r24, 0x00	; 0
    14f2:	97 70       	andi	r25, 0x07	; 7
    14f4:	88 0f       	add	r24, r24
    14f6:	89 2f       	mov	r24, r25
    14f8:	88 1f       	adc	r24, r24
    14fa:	99 0b       	sbc	r25, r25
    14fc:	91 95       	neg	r25
    14fe:	80 6a       	ori	r24, 0xA0	; 160
    1500:	0e 94 63 14 	call	0x28c6	; 0x28c6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1504:	0e 94 a0 14 	call	0x2940	; 0x2940 <TWI_getStatus>
    1508:	88 31       	cpi	r24, 0x18	; 24
    150a:	11 f0       	breq	.+4      	; 0x1510 <EEPROM_readByte+0x4a>
        return ERROR;
    150c:	1d 82       	std	Y+5, r1	; 0x05
    150e:	32 c0       	rjmp	.+100    	; 0x1574 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	0e 94 63 14 	call	0x28c6	; 0x28c6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1516:	0e 94 a0 14 	call	0x2940	; 0x2940 <TWI_getStatus>
    151a:	88 32       	cpi	r24, 0x28	; 40
    151c:	11 f0       	breq	.+4      	; 0x1522 <EEPROM_readByte+0x5c>
        return ERROR;
    151e:	1d 82       	std	Y+5, r1	; 0x05
    1520:	29 c0       	rjmp	.+82     	; 0x1574 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1522:	0e 94 48 14 	call	0x2890	; 0x2890 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1526:	0e 94 a0 14 	call	0x2940	; 0x2940 <TWI_getStatus>
    152a:	80 31       	cpi	r24, 0x10	; 16
    152c:	11 f0       	breq	.+4      	; 0x1532 <EEPROM_readByte+0x6c>
        return ERROR;
    152e:	1d 82       	std	Y+5, r1	; 0x05
    1530:	21 c0       	rjmp	.+66     	; 0x1574 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	9a 81       	ldd	r25, Y+2	; 0x02
    1536:	80 70       	andi	r24, 0x00	; 0
    1538:	97 70       	andi	r25, 0x07	; 7
    153a:	88 0f       	add	r24, r24
    153c:	89 2f       	mov	r24, r25
    153e:	88 1f       	adc	r24, r24
    1540:	99 0b       	sbc	r25, r25
    1542:	91 95       	neg	r25
    1544:	81 6a       	ori	r24, 0xA1	; 161
    1546:	0e 94 63 14 	call	0x28c6	; 0x28c6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    154a:	0e 94 a0 14 	call	0x2940	; 0x2940 <TWI_getStatus>
    154e:	80 34       	cpi	r24, 0x40	; 64
    1550:	11 f0       	breq	.+4      	; 0x1556 <EEPROM_readByte+0x90>
        return ERROR;
    1552:	1d 82       	std	Y+5, r1	; 0x05
    1554:	0f c0       	rjmp	.+30     	; 0x1574 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1556:	0e 94 8d 14 	call	0x291a	; 0x291a <TWI_readByteWithNACK>
    155a:	eb 81       	ldd	r30, Y+3	; 0x03
    155c:	fc 81       	ldd	r31, Y+4	; 0x04
    155e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1560:	0e 94 a0 14 	call	0x2940	; 0x2940 <TWI_getStatus>
    1564:	88 35       	cpi	r24, 0x58	; 88
    1566:	11 f0       	breq	.+4      	; 0x156c <EEPROM_readByte+0xa6>
        return ERROR;
    1568:	1d 82       	std	Y+5, r1	; 0x05
    156a:	04 c0       	rjmp	.+8      	; 0x1574 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    156c:	0e 94 58 14 	call	0x28b0	; 0x28b0 <TWI_stop>

    return SUCCESS;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	8d 83       	std	Y+5, r24	; 0x05
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	00 d0       	rcall	.+0      	; 0x158c <GPIO_setupPinDirection+0x6>
    158c:	00 d0       	rcall	.+0      	; 0x158e <GPIO_setupPinDirection+0x8>
    158e:	0f 92       	push	r0
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	6a 83       	std	Y+2, r22	; 0x02
    1598:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	88 30       	cpi	r24, 0x08	; 8
    159e:	08 f0       	brcs	.+2      	; 0x15a2 <GPIO_setupPinDirection+0x1c>
    15a0:	d5 c0       	rjmp	.+426    	; 0x174c <GPIO_setupPinDirection+0x1c6>
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	84 30       	cpi	r24, 0x04	; 4
    15a6:	08 f0       	brcs	.+2      	; 0x15aa <GPIO_setupPinDirection+0x24>
    15a8:	d1 c0       	rjmp	.+418    	; 0x174c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	3d 83       	std	Y+5, r19	; 0x05
    15b2:	2c 83       	std	Y+4, r18	; 0x04
    15b4:	8c 81       	ldd	r24, Y+4	; 0x04
    15b6:	9d 81       	ldd	r25, Y+5	; 0x05
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	91 05       	cpc	r25, r1
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <GPIO_setupPinDirection+0x3a>
    15be:	43 c0       	rjmp	.+134    	; 0x1646 <GPIO_setupPinDirection+0xc0>
    15c0:	2c 81       	ldd	r18, Y+4	; 0x04
    15c2:	3d 81       	ldd	r19, Y+5	; 0x05
    15c4:	22 30       	cpi	r18, 0x02	; 2
    15c6:	31 05       	cpc	r19, r1
    15c8:	2c f4       	brge	.+10     	; 0x15d4 <GPIO_setupPinDirection+0x4e>
    15ca:	8c 81       	ldd	r24, Y+4	; 0x04
    15cc:	9d 81       	ldd	r25, Y+5	; 0x05
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	71 f0       	breq	.+28     	; 0x15ee <GPIO_setupPinDirection+0x68>
    15d2:	bc c0       	rjmp	.+376    	; 0x174c <GPIO_setupPinDirection+0x1c6>
    15d4:	2c 81       	ldd	r18, Y+4	; 0x04
    15d6:	3d 81       	ldd	r19, Y+5	; 0x05
    15d8:	22 30       	cpi	r18, 0x02	; 2
    15da:	31 05       	cpc	r19, r1
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <GPIO_setupPinDirection+0x5a>
    15de:	5f c0       	rjmp	.+190    	; 0x169e <GPIO_setupPinDirection+0x118>
    15e0:	8c 81       	ldd	r24, Y+4	; 0x04
    15e2:	9d 81       	ldd	r25, Y+5	; 0x05
    15e4:	83 30       	cpi	r24, 0x03	; 3
    15e6:	91 05       	cpc	r25, r1
    15e8:	09 f4       	brne	.+2      	; 0x15ec <GPIO_setupPinDirection+0x66>
    15ea:	85 c0       	rjmp	.+266    	; 0x16f6 <GPIO_setupPinDirection+0x170>
    15ec:	af c0       	rjmp	.+350    	; 0x174c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	81 30       	cpi	r24, 0x01	; 1
    15f2:	a1 f4       	brne	.+40     	; 0x161c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    15f4:	aa e3       	ldi	r26, 0x3A	; 58
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	ea e3       	ldi	r30, 0x3A	; 58
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	48 2f       	mov	r20, r24
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 2e       	mov	r0, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <GPIO_setupPinDirection+0x8c>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	0a 94       	dec	r0
    1614:	e2 f7       	brpl	.-8      	; 0x160e <GPIO_setupPinDirection+0x88>
    1616:	84 2b       	or	r24, r20
    1618:	8c 93       	st	X, r24
    161a:	98 c0       	rjmp	.+304    	; 0x174c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    161c:	aa e3       	ldi	r26, 0x3A	; 58
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	ea e3       	ldi	r30, 0x3A	; 58
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	48 2f       	mov	r20, r24
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	02 2e       	mov	r0, r18
    1634:	02 c0       	rjmp	.+4      	; 0x163a <GPIO_setupPinDirection+0xb4>
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	0a 94       	dec	r0
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <GPIO_setupPinDirection+0xb0>
    163e:	80 95       	com	r24
    1640:	84 23       	and	r24, r20
    1642:	8c 93       	st	X, r24
    1644:	83 c0       	rjmp	.+262    	; 0x174c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	a1 f4       	brne	.+40     	; 0x1674 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    164c:	a7 e3       	ldi	r26, 0x37	; 55
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e7 e3       	ldi	r30, 0x37	; 55
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <GPIO_setupPinDirection+0xe4>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <GPIO_setupPinDirection+0xe0>
    166e:	84 2b       	or	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	6c c0       	rjmp	.+216    	; 0x174c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1674:	a7 e3       	ldi	r26, 0x37	; 55
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e7 e3       	ldi	r30, 0x37	; 55
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	48 2f       	mov	r20, r24
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	02 2e       	mov	r0, r18
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <GPIO_setupPinDirection+0x10c>
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	0a 94       	dec	r0
    1694:	e2 f7       	brpl	.-8      	; 0x168e <GPIO_setupPinDirection+0x108>
    1696:	80 95       	com	r24
    1698:	84 23       	and	r24, r20
    169a:	8c 93       	st	X, r24
    169c:	57 c0       	rjmp	.+174    	; 0x174c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	a1 f4       	brne	.+40     	; 0x16cc <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    16a4:	a4 e3       	ldi	r26, 0x34	; 52
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e4 e3       	ldi	r30, 0x34	; 52
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	48 2f       	mov	r20, r24
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 2e       	mov	r0, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <GPIO_setupPinDirection+0x13c>
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	0a 94       	dec	r0
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <GPIO_setupPinDirection+0x138>
    16c6:	84 2b       	or	r24, r20
    16c8:	8c 93       	st	X, r24
    16ca:	40 c0       	rjmp	.+128    	; 0x174c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    16cc:	a4 e3       	ldi	r26, 0x34	; 52
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e4 e3       	ldi	r30, 0x34	; 52
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	48 2f       	mov	r20, r24
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	02 2e       	mov	r0, r18
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <GPIO_setupPinDirection+0x164>
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	0a 94       	dec	r0
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <GPIO_setupPinDirection+0x160>
    16ee:	80 95       	com	r24
    16f0:	84 23       	and	r24, r20
    16f2:	8c 93       	st	X, r24
    16f4:	2b c0       	rjmp	.+86     	; 0x174c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	a1 f4       	brne	.+40     	; 0x1724 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    16fc:	a1 e3       	ldi	r26, 0x31	; 49
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e1 e3       	ldi	r30, 0x31	; 49
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 2e       	mov	r0, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <GPIO_setupPinDirection+0x194>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <GPIO_setupPinDirection+0x190>
    171e:	84 2b       	or	r24, r20
    1720:	8c 93       	st	X, r24
    1722:	14 c0       	rjmp	.+40     	; 0x174c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1724:	a1 e3       	ldi	r26, 0x31	; 49
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e1 e3       	ldi	r30, 0x31	; 49
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	48 2f       	mov	r20, r24
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 2e       	mov	r0, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <GPIO_setupPinDirection+0x1bc>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	0a 94       	dec	r0
    1744:	e2 f7       	brpl	.-8      	; 0x173e <GPIO_setupPinDirection+0x1b8>
    1746:	80 95       	com	r24
    1748:	84 23       	and	r24, r20
    174a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	00 d0       	rcall	.+0      	; 0x1762 <GPIO_writePin+0x6>
    1762:	00 d0       	rcall	.+0      	; 0x1764 <GPIO_writePin+0x8>
    1764:	0f 92       	push	r0
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	6a 83       	std	Y+2, r22	; 0x02
    176e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	88 30       	cpi	r24, 0x08	; 8
    1774:	08 f0       	brcs	.+2      	; 0x1778 <GPIO_writePin+0x1c>
    1776:	d5 c0       	rjmp	.+426    	; 0x1922 <GPIO_writePin+0x1c6>
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	84 30       	cpi	r24, 0x04	; 4
    177c:	08 f0       	brcs	.+2      	; 0x1780 <GPIO_writePin+0x24>
    177e:	d1 c0       	rjmp	.+418    	; 0x1922 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	3d 83       	std	Y+5, r19	; 0x05
    1788:	2c 83       	std	Y+4, r18	; 0x04
    178a:	8c 81       	ldd	r24, Y+4	; 0x04
    178c:	9d 81       	ldd	r25, Y+5	; 0x05
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	91 05       	cpc	r25, r1
    1792:	09 f4       	brne	.+2      	; 0x1796 <GPIO_writePin+0x3a>
    1794:	43 c0       	rjmp	.+134    	; 0x181c <GPIO_writePin+0xc0>
    1796:	2c 81       	ldd	r18, Y+4	; 0x04
    1798:	3d 81       	ldd	r19, Y+5	; 0x05
    179a:	22 30       	cpi	r18, 0x02	; 2
    179c:	31 05       	cpc	r19, r1
    179e:	2c f4       	brge	.+10     	; 0x17aa <GPIO_writePin+0x4e>
    17a0:	8c 81       	ldd	r24, Y+4	; 0x04
    17a2:	9d 81       	ldd	r25, Y+5	; 0x05
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	71 f0       	breq	.+28     	; 0x17c4 <GPIO_writePin+0x68>
    17a8:	bc c0       	rjmp	.+376    	; 0x1922 <GPIO_writePin+0x1c6>
    17aa:	2c 81       	ldd	r18, Y+4	; 0x04
    17ac:	3d 81       	ldd	r19, Y+5	; 0x05
    17ae:	22 30       	cpi	r18, 0x02	; 2
    17b0:	31 05       	cpc	r19, r1
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <GPIO_writePin+0x5a>
    17b4:	5f c0       	rjmp	.+190    	; 0x1874 <GPIO_writePin+0x118>
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ba:	83 30       	cpi	r24, 0x03	; 3
    17bc:	91 05       	cpc	r25, r1
    17be:	09 f4       	brne	.+2      	; 0x17c2 <GPIO_writePin+0x66>
    17c0:	85 c0       	rjmp	.+266    	; 0x18cc <GPIO_writePin+0x170>
    17c2:	af c0       	rjmp	.+350    	; 0x1922 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	81 30       	cpi	r24, 0x01	; 1
    17c8:	a1 f4       	brne	.+40     	; 0x17f2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    17ca:	ab e3       	ldi	r26, 0x3B	; 59
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	eb e3       	ldi	r30, 0x3B	; 59
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	48 2f       	mov	r20, r24
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <GPIO_writePin+0x8c>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <GPIO_writePin+0x88>
    17ec:	84 2b       	or	r24, r20
    17ee:	8c 93       	st	X, r24
    17f0:	98 c0       	rjmp	.+304    	; 0x1922 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    17f2:	ab e3       	ldi	r26, 0x3B	; 59
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	eb e3       	ldi	r30, 0x3B	; 59
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	48 2f       	mov	r20, r24
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 2e       	mov	r0, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <GPIO_writePin+0xb4>
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	0a 94       	dec	r0
    1812:	e2 f7       	brpl	.-8      	; 0x180c <GPIO_writePin+0xb0>
    1814:	80 95       	com	r24
    1816:	84 23       	and	r24, r20
    1818:	8c 93       	st	X, r24
    181a:	83 c0       	rjmp	.+262    	; 0x1922 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	a1 f4       	brne	.+40     	; 0x184a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1822:	a8 e3       	ldi	r26, 0x38	; 56
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e8 e3       	ldi	r30, 0x38	; 56
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	48 2f       	mov	r20, r24
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	02 2e       	mov	r0, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <GPIO_writePin+0xe4>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	0a 94       	dec	r0
    1842:	e2 f7       	brpl	.-8      	; 0x183c <GPIO_writePin+0xe0>
    1844:	84 2b       	or	r24, r20
    1846:	8c 93       	st	X, r24
    1848:	6c c0       	rjmp	.+216    	; 0x1922 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    184a:	a8 e3       	ldi	r26, 0x38	; 56
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e8 e3       	ldi	r30, 0x38	; 56
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	48 2f       	mov	r20, r24
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	02 2e       	mov	r0, r18
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <GPIO_writePin+0x10c>
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	0a 94       	dec	r0
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <GPIO_writePin+0x108>
    186c:	80 95       	com	r24
    186e:	84 23       	and	r24, r20
    1870:	8c 93       	st	X, r24
    1872:	57 c0       	rjmp	.+174    	; 0x1922 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	a1 f4       	brne	.+40     	; 0x18a2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    187a:	a5 e3       	ldi	r26, 0x35	; 53
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e5 e3       	ldi	r30, 0x35	; 53
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	48 2f       	mov	r20, r24
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	02 2e       	mov	r0, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <GPIO_writePin+0x13c>
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	0a 94       	dec	r0
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <GPIO_writePin+0x138>
    189c:	84 2b       	or	r24, r20
    189e:	8c 93       	st	X, r24
    18a0:	40 c0       	rjmp	.+128    	; 0x1922 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    18a2:	a5 e3       	ldi	r26, 0x35	; 53
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e5 e3       	ldi	r30, 0x35	; 53
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	48 2f       	mov	r20, r24
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	02 2e       	mov	r0, r18
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <GPIO_writePin+0x164>
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	0a 94       	dec	r0
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <GPIO_writePin+0x160>
    18c4:	80 95       	com	r24
    18c6:	84 23       	and	r24, r20
    18c8:	8c 93       	st	X, r24
    18ca:	2b c0       	rjmp	.+86     	; 0x1922 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	81 30       	cpi	r24, 0x01	; 1
    18d0:	a1 f4       	brne	.+40     	; 0x18fa <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    18d2:	a2 e3       	ldi	r26, 0x32	; 50
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e2 e3       	ldi	r30, 0x32	; 50
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	48 2f       	mov	r20, r24
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <GPIO_writePin+0x194>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <GPIO_writePin+0x190>
    18f4:	84 2b       	or	r24, r20
    18f6:	8c 93       	st	X, r24
    18f8:	14 c0       	rjmp	.+40     	; 0x1922 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    18fa:	a2 e3       	ldi	r26, 0x32	; 50
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e2 e3       	ldi	r30, 0x32	; 50
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	48 2f       	mov	r20, r24
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 2e       	mov	r0, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <GPIO_writePin+0x1bc>
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	0a 94       	dec	r0
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <GPIO_writePin+0x1b8>
    191c:	80 95       	com	r24
    191e:	84 23       	and	r24, r20
    1920:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	00 d0       	rcall	.+0      	; 0x1938 <GPIO_readPin+0x6>
    1938:	00 d0       	rcall	.+0      	; 0x193a <GPIO_readPin+0x8>
    193a:	0f 92       	push	r0
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	8a 83       	std	Y+2, r24	; 0x02
    1942:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1944:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	88 30       	cpi	r24, 0x08	; 8
    194a:	08 f0       	brcs	.+2      	; 0x194e <GPIO_readPin+0x1c>
    194c:	84 c0       	rjmp	.+264    	; 0x1a56 <GPIO_readPin+0x124>
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	84 30       	cpi	r24, 0x04	; 4
    1952:	08 f0       	brcs	.+2      	; 0x1956 <GPIO_readPin+0x24>
    1954:	80 c0       	rjmp	.+256    	; 0x1a56 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	3d 83       	std	Y+5, r19	; 0x05
    195e:	2c 83       	std	Y+4, r18	; 0x04
    1960:	4c 81       	ldd	r20, Y+4	; 0x04
    1962:	5d 81       	ldd	r21, Y+5	; 0x05
    1964:	41 30       	cpi	r20, 0x01	; 1
    1966:	51 05       	cpc	r21, r1
    1968:	79 f1       	breq	.+94     	; 0x19c8 <GPIO_readPin+0x96>
    196a:	8c 81       	ldd	r24, Y+4	; 0x04
    196c:	9d 81       	ldd	r25, Y+5	; 0x05
    196e:	82 30       	cpi	r24, 0x02	; 2
    1970:	91 05       	cpc	r25, r1
    1972:	34 f4       	brge	.+12     	; 0x1980 <GPIO_readPin+0x4e>
    1974:	2c 81       	ldd	r18, Y+4	; 0x04
    1976:	3d 81       	ldd	r19, Y+5	; 0x05
    1978:	21 15       	cp	r18, r1
    197a:	31 05       	cpc	r19, r1
    197c:	69 f0       	breq	.+26     	; 0x1998 <GPIO_readPin+0x66>
    197e:	6b c0       	rjmp	.+214    	; 0x1a56 <GPIO_readPin+0x124>
    1980:	4c 81       	ldd	r20, Y+4	; 0x04
    1982:	5d 81       	ldd	r21, Y+5	; 0x05
    1984:	42 30       	cpi	r20, 0x02	; 2
    1986:	51 05       	cpc	r21, r1
    1988:	b9 f1       	breq	.+110    	; 0x19f8 <GPIO_readPin+0xc6>
    198a:	8c 81       	ldd	r24, Y+4	; 0x04
    198c:	9d 81       	ldd	r25, Y+5	; 0x05
    198e:	83 30       	cpi	r24, 0x03	; 3
    1990:	91 05       	cpc	r25, r1
    1992:	09 f4       	brne	.+2      	; 0x1996 <GPIO_readPin+0x64>
    1994:	49 c0       	rjmp	.+146    	; 0x1a28 <GPIO_readPin+0xf6>
    1996:	5f c0       	rjmp	.+190    	; 0x1a56 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1998:	e9 e3       	ldi	r30, 0x39	; 57
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	88 2f       	mov	r24, r24
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	a9 01       	movw	r20, r18
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <GPIO_readPin+0x7e>
    19ac:	55 95       	asr	r21
    19ae:	47 95       	ror	r20
    19b0:	8a 95       	dec	r24
    19b2:	e2 f7       	brpl	.-8      	; 0x19ac <GPIO_readPin+0x7a>
    19b4:	ca 01       	movw	r24, r20
    19b6:	81 70       	andi	r24, 0x01	; 1
    19b8:	90 70       	andi	r25, 0x00	; 0
    19ba:	88 23       	and	r24, r24
    19bc:	19 f0       	breq	.+6      	; 0x19c4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	49 c0       	rjmp	.+146    	; 0x1a56 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19c4:	19 82       	std	Y+1, r1	; 0x01
    19c6:	47 c0       	rjmp	.+142    	; 0x1a56 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    19c8:	e6 e3       	ldi	r30, 0x36	; 54
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	88 2f       	mov	r24, r24
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	a9 01       	movw	r20, r18
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <GPIO_readPin+0xae>
    19dc:	55 95       	asr	r21
    19de:	47 95       	ror	r20
    19e0:	8a 95       	dec	r24
    19e2:	e2 f7       	brpl	.-8      	; 0x19dc <GPIO_readPin+0xaa>
    19e4:	ca 01       	movw	r24, r20
    19e6:	81 70       	andi	r24, 0x01	; 1
    19e8:	90 70       	andi	r25, 0x00	; 0
    19ea:	88 23       	and	r24, r24
    19ec:	19 f0       	breq	.+6      	; 0x19f4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	89 83       	std	Y+1, r24	; 0x01
    19f2:	31 c0       	rjmp	.+98     	; 0x1a56 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19f4:	19 82       	std	Y+1, r1	; 0x01
    19f6:	2f c0       	rjmp	.+94     	; 0x1a56 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    19f8:	e3 e3       	ldi	r30, 0x33	; 51
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	88 2f       	mov	r24, r24
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	a9 01       	movw	r20, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <GPIO_readPin+0xde>
    1a0c:	55 95       	asr	r21
    1a0e:	47 95       	ror	r20
    1a10:	8a 95       	dec	r24
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <GPIO_readPin+0xda>
    1a14:	ca 01       	movw	r24, r20
    1a16:	81 70       	andi	r24, 0x01	; 1
    1a18:	90 70       	andi	r25, 0x00	; 0
    1a1a:	88 23       	and	r24, r24
    1a1c:	19 f0       	breq	.+6      	; 0x1a24 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	89 83       	std	Y+1, r24	; 0x01
    1a22:	19 c0       	rjmp	.+50     	; 0x1a56 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a24:	19 82       	std	Y+1, r1	; 0x01
    1a26:	17 c0       	rjmp	.+46     	; 0x1a56 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a28:	e0 e3       	ldi	r30, 0x30	; 48
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	88 2f       	mov	r24, r24
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	a9 01       	movw	r20, r18
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <GPIO_readPin+0x10e>
    1a3c:	55 95       	asr	r21
    1a3e:	47 95       	ror	r20
    1a40:	8a 95       	dec	r24
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <GPIO_readPin+0x10a>
    1a44:	ca 01       	movw	r24, r20
    1a46:	81 70       	andi	r24, 0x01	; 1
    1a48:	90 70       	andi	r25, 0x00	; 0
    1a4a:	88 23       	and	r24, r24
    1a4c:	19 f0       	breq	.+6      	; 0x1a54 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	89 83       	std	Y+1, r24	; 0x01
    1a52:	01 c0       	rjmp	.+2      	; 0x1a56 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a54:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <GPIO_setupPortDirection+0x6>
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <GPIO_setupPortDirection+0x8>
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	84 30       	cpi	r24, 0x04	; 4
    1a7c:	90 f5       	brcc	.+100    	; 0x1ae2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	3c 83       	std	Y+4, r19	; 0x04
    1a86:	2b 83       	std	Y+3, r18	; 0x03
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	81 30       	cpi	r24, 0x01	; 1
    1a8e:	91 05       	cpc	r25, r1
    1a90:	d1 f0       	breq	.+52     	; 0x1ac6 <GPIO_setupPortDirection+0x5e>
    1a92:	2b 81       	ldd	r18, Y+3	; 0x03
    1a94:	3c 81       	ldd	r19, Y+4	; 0x04
    1a96:	22 30       	cpi	r18, 0x02	; 2
    1a98:	31 05       	cpc	r19, r1
    1a9a:	2c f4       	brge	.+10     	; 0x1aa6 <GPIO_setupPortDirection+0x3e>
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	61 f0       	breq	.+24     	; 0x1abc <GPIO_setupPortDirection+0x54>
    1aa4:	1e c0       	rjmp	.+60     	; 0x1ae2 <GPIO_setupPortDirection+0x7a>
    1aa6:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aaa:	22 30       	cpi	r18, 0x02	; 2
    1aac:	31 05       	cpc	r19, r1
    1aae:	81 f0       	breq	.+32     	; 0x1ad0 <GPIO_setupPortDirection+0x68>
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab4:	83 30       	cpi	r24, 0x03	; 3
    1ab6:	91 05       	cpc	r25, r1
    1ab8:	81 f0       	breq	.+32     	; 0x1ada <GPIO_setupPortDirection+0x72>
    1aba:	13 c0       	rjmp	.+38     	; 0x1ae2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1abc:	ea e3       	ldi	r30, 0x3A	; 58
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	80 83       	st	Z, r24
    1ac4:	0e c0       	rjmp	.+28     	; 0x1ae2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ac6:	e7 e3       	ldi	r30, 0x37	; 55
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	80 83       	st	Z, r24
    1ace:	09 c0       	rjmp	.+18     	; 0x1ae2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1ad0:	e4 e3       	ldi	r30, 0x34	; 52
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	80 83       	st	Z, r24
    1ad8:	04 c0       	rjmp	.+8      	; 0x1ae2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ada:	e1 e3       	ldi	r30, 0x31	; 49
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <GPIO_writePort+0x6>
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <GPIO_writePort+0x8>
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
    1afc:	89 83       	std	Y+1, r24	; 0x01
    1afe:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	84 30       	cpi	r24, 0x04	; 4
    1b04:	90 f5       	brcc	.+100    	; 0x1b6a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	3c 83       	std	Y+4, r19	; 0x04
    1b0e:	2b 83       	std	Y+3, r18	; 0x03
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	81 30       	cpi	r24, 0x01	; 1
    1b16:	91 05       	cpc	r25, r1
    1b18:	d1 f0       	breq	.+52     	; 0x1b4e <GPIO_writePort+0x5e>
    1b1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b1e:	22 30       	cpi	r18, 0x02	; 2
    1b20:	31 05       	cpc	r19, r1
    1b22:	2c f4       	brge	.+10     	; 0x1b2e <GPIO_writePort+0x3e>
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	9c 81       	ldd	r25, Y+4	; 0x04
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	61 f0       	breq	.+24     	; 0x1b44 <GPIO_writePort+0x54>
    1b2c:	1e c0       	rjmp	.+60     	; 0x1b6a <GPIO_writePort+0x7a>
    1b2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b30:	3c 81       	ldd	r19, Y+4	; 0x04
    1b32:	22 30       	cpi	r18, 0x02	; 2
    1b34:	31 05       	cpc	r19, r1
    1b36:	81 f0       	breq	.+32     	; 0x1b58 <GPIO_writePort+0x68>
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	83 30       	cpi	r24, 0x03	; 3
    1b3e:	91 05       	cpc	r25, r1
    1b40:	81 f0       	breq	.+32     	; 0x1b62 <GPIO_writePort+0x72>
    1b42:	13 c0       	rjmp	.+38     	; 0x1b6a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b44:	eb e3       	ldi	r30, 0x3B	; 59
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	80 83       	st	Z, r24
    1b4c:	0e c0       	rjmp	.+28     	; 0x1b6a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b4e:	e8 e3       	ldi	r30, 0x38	; 56
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	80 83       	st	Z, r24
    1b56:	09 c0       	rjmp	.+18     	; 0x1b6a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b58:	e5 e3       	ldi	r30, 0x35	; 53
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	80 83       	st	Z, r24
    1b60:	04 c0       	rjmp	.+8      	; 0x1b6a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b62:	e2 e3       	ldi	r30, 0x32	; 50
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	08 95       	ret

00001b78 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <GPIO_readPort+0x6>
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <GPIO_readPort+0x8>
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1b86:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	84 30       	cpi	r24, 0x04	; 4
    1b8c:	90 f5       	brcc	.+100    	; 0x1bf2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	3c 83       	std	Y+4, r19	; 0x04
    1b96:	2b 83       	std	Y+3, r18	; 0x03
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9c:	81 30       	cpi	r24, 0x01	; 1
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	d1 f0       	breq	.+52     	; 0x1bd6 <GPIO_readPort+0x5e>
    1ba2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba6:	22 30       	cpi	r18, 0x02	; 2
    1ba8:	31 05       	cpc	r19, r1
    1baa:	2c f4       	brge	.+10     	; 0x1bb6 <GPIO_readPort+0x3e>
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	00 97       	sbiw	r24, 0x00	; 0
    1bb2:	61 f0       	breq	.+24     	; 0x1bcc <GPIO_readPort+0x54>
    1bb4:	1e c0       	rjmp	.+60     	; 0x1bf2 <GPIO_readPort+0x7a>
    1bb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bba:	22 30       	cpi	r18, 0x02	; 2
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	81 f0       	breq	.+32     	; 0x1be0 <GPIO_readPort+0x68>
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc4:	83 30       	cpi	r24, 0x03	; 3
    1bc6:	91 05       	cpc	r25, r1
    1bc8:	81 f0       	breq	.+32     	; 0x1bea <GPIO_readPort+0x72>
    1bca:	13 c0       	rjmp	.+38     	; 0x1bf2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1bcc:	e9 e3       	ldi	r30, 0x39	; 57
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	0e c0       	rjmp	.+28     	; 0x1bf2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1bd6:	e6 e3       	ldi	r30, 0x36	; 54
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	09 c0       	rjmp	.+18     	; 0x1bf2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1be0:	e3 e3       	ldi	r30, 0x33	; 51
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	04 c0       	rjmp	.+8      	; 0x1bf2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1bea:	e0 e3       	ldi	r30, 0x30	; 48
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	2e 97       	sbiw	r28, 0x0e	; 14
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	60 e0       	ldi	r22, 0x00	; 0
    1c1a:	41 e0       	ldi	r20, 0x01	; 1
    1c1c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	61 e0       	ldi	r22, 0x01	; 1
    1c24:	41 e0       	ldi	r20, 0x01	; 1
    1c26:	0e 94 c3 0a 	call	0x1586	; 0x1586 <GPIO_setupPinDirection>
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	a0 ea       	ldi	r26, 0xA0	; 160
    1c30:	b1 e4       	ldi	r27, 0x41	; 65
    1c32:	8b 87       	std	Y+11, r24	; 0x0b
    1c34:	9c 87       	std	Y+12, r25	; 0x0c
    1c36:	ad 87       	std	Y+13, r26	; 0x0d
    1c38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	4a ef       	ldi	r20, 0xFA	; 250
    1c48:	54 e4       	ldi	r21, 0x44	; 68
    1c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	8f 83       	std	Y+7, r24	; 0x07
    1c54:	98 87       	std	Y+8, r25	; 0x08
    1c56:	a9 87       	std	Y+9, r26	; 0x09
    1c58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5c:	78 85       	ldd	r23, Y+8	; 0x08
    1c5e:	89 85       	ldd	r24, Y+9	; 0x09
    1c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e8       	ldi	r20, 0x80	; 128
    1c68:	5f e3       	ldi	r21, 0x3F	; 63
    1c6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c6e:	88 23       	and	r24, r24
    1c70:	2c f4       	brge	.+10     	; 0x1c7c <LCD_init+0x7a>
		__ticks = 1;
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	9e 83       	std	Y+6, r25	; 0x06
    1c78:	8d 83       	std	Y+5, r24	; 0x05
    1c7a:	3f c0       	rjmp	.+126    	; 0x1cfa <LCD_init+0xf8>
	else if (__tmp > 65535)
    1c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7e:	78 85       	ldd	r23, Y+8	; 0x08
    1c80:	89 85       	ldd	r24, Y+9	; 0x09
    1c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	3f ef       	ldi	r19, 0xFF	; 255
    1c88:	4f e7       	ldi	r20, 0x7F	; 127
    1c8a:	57 e4       	ldi	r21, 0x47	; 71
    1c8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c90:	18 16       	cp	r1, r24
    1c92:	4c f5       	brge	.+82     	; 0x1ce6 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e2       	ldi	r20, 0x20	; 32
    1ca2:	51 e4       	ldi	r21, 0x41	; 65
    1ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	bc 01       	movw	r22, r24
    1cae:	cd 01       	movw	r24, r26
    1cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	9e 83       	std	Y+6, r25	; 0x06
    1cba:	8d 83       	std	Y+5, r24	; 0x05
    1cbc:	0f c0       	rjmp	.+30     	; 0x1cdc <LCD_init+0xda>
    1cbe:	88 ec       	ldi	r24, 0xC8	; 200
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	9c 83       	std	Y+4, r25	; 0x04
    1cc4:	8b 83       	std	Y+3, r24	; 0x03
    1cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <LCD_init+0xc8>
    1cce:	9c 83       	std	Y+4, r25	; 0x04
    1cd0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	9e 83       	std	Y+6, r25	; 0x06
    1cda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cde:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	69 f7       	brne	.-38     	; 0x1cbe <LCD_init+0xbc>
    1ce4:	14 c0       	rjmp	.+40     	; 0x1d0e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce8:	78 85       	ldd	r23, Y+8	; 0x08
    1cea:	89 85       	ldd	r24, Y+9	; 0x09
    1cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	9e 83       	std	Y+6, r25	; 0x06
    1cf8:	8d 83       	std	Y+5, r24	; 0x05
    1cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfe:	9a 83       	std	Y+2, r25	; 0x02
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	9a 81       	ldd	r25, Y+2	; 0x02
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <LCD_init+0x104>
    1d0a:	9a 83       	std	Y+2, r25	; 0x02
    1d0c:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	6f ef       	ldi	r22, 0xFF	; 255
    1d12:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1d16:	88 e3       	ldi	r24, 0x38	; 56
    1d18:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1d1c:	8c e0       	ldi	r24, 0x0C	; 12
    1d1e:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_sendCommand>
}
    1d28:	2e 96       	adiw	r28, 0x0e	; 14
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	08 95       	ret

00001d3a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
    1d42:	e9 97       	sbiw	r28, 0x39	; 57
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	de bf       	out	0x3e, r29	; 62
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	cd bf       	out	0x3d, r28	; 61
    1d4e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	60 e0       	ldi	r22, 0x00	; 0
    1d54:	40 e0       	ldi	r20, 0x00	; 0
    1d56:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_writePin>
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	a0 e8       	ldi	r26, 0x80	; 128
    1d60:	bf e3       	ldi	r27, 0x3F	; 63
    1d62:	8d ab       	std	Y+53, r24	; 0x35
    1d64:	9e ab       	std	Y+54, r25	; 0x36
    1d66:	af ab       	std	Y+55, r26	; 0x37
    1d68:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d6a:	6d a9       	ldd	r22, Y+53	; 0x35
    1d6c:	7e a9       	ldd	r23, Y+54	; 0x36
    1d6e:	8f a9       	ldd	r24, Y+55	; 0x37
    1d70:	98 ad       	ldd	r25, Y+56	; 0x38
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	4a ef       	ldi	r20, 0xFA	; 250
    1d78:	54 e4       	ldi	r21, 0x44	; 68
    1d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	89 ab       	std	Y+49, r24	; 0x31
    1d84:	9a ab       	std	Y+50, r25	; 0x32
    1d86:	ab ab       	std	Y+51, r26	; 0x33
    1d88:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d8a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d8c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d8e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d90:	9c a9       	ldd	r25, Y+52	; 0x34
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e8       	ldi	r20, 0x80	; 128
    1d98:	5f e3       	ldi	r21, 0x3F	; 63
    1d9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d9e:	88 23       	and	r24, r24
    1da0:	2c f4       	brge	.+10     	; 0x1dac <LCD_sendCommand+0x72>
		__ticks = 1;
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	98 ab       	std	Y+48, r25	; 0x30
    1da8:	8f a7       	std	Y+47, r24	; 0x2f
    1daa:	3f c0       	rjmp	.+126    	; 0x1e2a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1dac:	69 a9       	ldd	r22, Y+49	; 0x31
    1dae:	7a a9       	ldd	r23, Y+50	; 0x32
    1db0:	8b a9       	ldd	r24, Y+51	; 0x33
    1db2:	9c a9       	ldd	r25, Y+52	; 0x34
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	3f ef       	ldi	r19, 0xFF	; 255
    1db8:	4f e7       	ldi	r20, 0x7F	; 127
    1dba:	57 e4       	ldi	r21, 0x47	; 71
    1dbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc0:	18 16       	cp	r1, r24
    1dc2:	4c f5       	brge	.+82     	; 0x1e16 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc4:	6d a9       	ldd	r22, Y+53	; 0x35
    1dc6:	7e a9       	ldd	r23, Y+54	; 0x36
    1dc8:	8f a9       	ldd	r24, Y+55	; 0x37
    1dca:	98 ad       	ldd	r25, Y+56	; 0x38
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	40 e2       	ldi	r20, 0x20	; 32
    1dd2:	51 e4       	ldi	r21, 0x41	; 65
    1dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	bc 01       	movw	r22, r24
    1dde:	cd 01       	movw	r24, r26
    1de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	98 ab       	std	Y+48, r25	; 0x30
    1dea:	8f a7       	std	Y+47, r24	; 0x2f
    1dec:	0f c0       	rjmp	.+30     	; 0x1e0c <LCD_sendCommand+0xd2>
    1dee:	88 ec       	ldi	r24, 0xC8	; 200
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	9e a7       	std	Y+46, r25	; 0x2e
    1df4:	8d a7       	std	Y+45, r24	; 0x2d
    1df6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1df8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	f1 f7       	brne	.-4      	; 0x1dfa <LCD_sendCommand+0xc0>
    1dfe:	9e a7       	std	Y+46, r25	; 0x2e
    1e00:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e02:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e04:	98 a9       	ldd	r25, Y+48	; 0x30
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	98 ab       	std	Y+48, r25	; 0x30
    1e0a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	69 f7       	brne	.-38     	; 0x1dee <LCD_sendCommand+0xb4>
    1e14:	14 c0       	rjmp	.+40     	; 0x1e3e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e16:	69 a9       	ldd	r22, Y+49	; 0x31
    1e18:	7a a9       	ldd	r23, Y+50	; 0x32
    1e1a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e1c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	98 ab       	std	Y+48, r25	; 0x30
    1e28:	8f a7       	std	Y+47, r24	; 0x2f
    1e2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e2e:	9c a7       	std	Y+44, r25	; 0x2c
    1e30:	8b a7       	std	Y+43, r24	; 0x2b
    1e32:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e34:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <LCD_sendCommand+0xfc>
    1e3a:	9c a7       	std	Y+44, r25	; 0x2c
    1e3c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	61 e0       	ldi	r22, 0x01	; 1
    1e42:	41 e0       	ldi	r20, 0x01	; 1
    1e44:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_writePin>
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	a0 e8       	ldi	r26, 0x80	; 128
    1e4e:	bf e3       	ldi	r27, 0x3F	; 63
    1e50:	8f a3       	std	Y+39, r24	; 0x27
    1e52:	98 a7       	std	Y+40, r25	; 0x28
    1e54:	a9 a7       	std	Y+41, r26	; 0x29
    1e56:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e58:	6f a1       	ldd	r22, Y+39	; 0x27
    1e5a:	78 a5       	ldd	r23, Y+40	; 0x28
    1e5c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	4a ef       	ldi	r20, 0xFA	; 250
    1e66:	54 e4       	ldi	r21, 0x44	; 68
    1e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	8b a3       	std	Y+35, r24	; 0x23
    1e72:	9c a3       	std	Y+36, r25	; 0x24
    1e74:	ad a3       	std	Y+37, r26	; 0x25
    1e76:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e78:	6b a1       	ldd	r22, Y+35	; 0x23
    1e7a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e7c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e7e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e8       	ldi	r20, 0x80	; 128
    1e86:	5f e3       	ldi	r21, 0x3F	; 63
    1e88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e8c:	88 23       	and	r24, r24
    1e8e:	2c f4       	brge	.+10     	; 0x1e9a <LCD_sendCommand+0x160>
		__ticks = 1;
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	9a a3       	std	Y+34, r25	; 0x22
    1e96:	89 a3       	std	Y+33, r24	; 0x21
    1e98:	3f c0       	rjmp	.+126    	; 0x1f18 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1e9a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e9c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1ea0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	3f ef       	ldi	r19, 0xFF	; 255
    1ea6:	4f e7       	ldi	r20, 0x7F	; 127
    1ea8:	57 e4       	ldi	r21, 0x47	; 71
    1eaa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eae:	18 16       	cp	r1, r24
    1eb0:	4c f5       	brge	.+82     	; 0x1f04 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb2:	6f a1       	ldd	r22, Y+39	; 0x27
    1eb4:	78 a5       	ldd	r23, Y+40	; 0x28
    1eb6:	89 a5       	ldd	r24, Y+41	; 0x29
    1eb8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e2       	ldi	r20, 0x20	; 32
    1ec0:	51 e4       	ldi	r21, 0x41	; 65
    1ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	bc 01       	movw	r22, r24
    1ecc:	cd 01       	movw	r24, r26
    1ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	9a a3       	std	Y+34, r25	; 0x22
    1ed8:	89 a3       	std	Y+33, r24	; 0x21
    1eda:	0f c0       	rjmp	.+30     	; 0x1efa <LCD_sendCommand+0x1c0>
    1edc:	88 ec       	ldi	r24, 0xC8	; 200
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	98 a3       	std	Y+32, r25	; 0x20
    1ee2:	8f 8f       	std	Y+31, r24	; 0x1f
    1ee4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ee6:	98 a1       	ldd	r25, Y+32	; 0x20
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <LCD_sendCommand+0x1ae>
    1eec:	98 a3       	std	Y+32, r25	; 0x20
    1eee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ef2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	9a a3       	std	Y+34, r25	; 0x22
    1ef8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efa:	89 a1       	ldd	r24, Y+33	; 0x21
    1efc:	9a a1       	ldd	r25, Y+34	; 0x22
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	69 f7       	brne	.-38     	; 0x1edc <LCD_sendCommand+0x1a2>
    1f02:	14 c0       	rjmp	.+40     	; 0x1f2c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f04:	6b a1       	ldd	r22, Y+35	; 0x23
    1f06:	7c a1       	ldd	r23, Y+36	; 0x24
    1f08:	8d a1       	ldd	r24, Y+37	; 0x25
    1f0a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	9a a3       	std	Y+34, r25	; 0x22
    1f16:	89 a3       	std	Y+33, r24	; 0x21
    1f18:	89 a1       	ldd	r24, Y+33	; 0x21
    1f1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f1c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f1e:	8d 8f       	std	Y+29, r24	; 0x1d
    1f20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <LCD_sendCommand+0x1ea>
    1f28:	9e 8f       	std	Y+30, r25	; 0x1e
    1f2a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	69 ad       	ldd	r22, Y+57	; 0x39
    1f30:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <GPIO_writePort>
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	a0 e8       	ldi	r26, 0x80	; 128
    1f3a:	bf e3       	ldi	r27, 0x3F	; 63
    1f3c:	89 8f       	std	Y+25, r24	; 0x19
    1f3e:	9a 8f       	std	Y+26, r25	; 0x1a
    1f40:	ab 8f       	std	Y+27, r26	; 0x1b
    1f42:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f44:	69 8d       	ldd	r22, Y+25	; 0x19
    1f46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	4a ef       	ldi	r20, 0xFA	; 250
    1f52:	54 e4       	ldi	r21, 0x44	; 68
    1f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	8d 8b       	std	Y+21, r24	; 0x15
    1f5e:	9e 8b       	std	Y+22, r25	; 0x16
    1f60:	af 8b       	std	Y+23, r26	; 0x17
    1f62:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f64:	6d 89       	ldd	r22, Y+21	; 0x15
    1f66:	7e 89       	ldd	r23, Y+22	; 0x16
    1f68:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	40 e8       	ldi	r20, 0x80	; 128
    1f72:	5f e3       	ldi	r21, 0x3F	; 63
    1f74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f78:	88 23       	and	r24, r24
    1f7a:	2c f4       	brge	.+10     	; 0x1f86 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	9c 8b       	std	Y+20, r25	; 0x14
    1f82:	8b 8b       	std	Y+19, r24	; 0x13
    1f84:	3f c0       	rjmp	.+126    	; 0x2004 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1f86:	6d 89       	ldd	r22, Y+21	; 0x15
    1f88:	7e 89       	ldd	r23, Y+22	; 0x16
    1f8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	3f ef       	ldi	r19, 0xFF	; 255
    1f92:	4f e7       	ldi	r20, 0x7F	; 127
    1f94:	57 e4       	ldi	r21, 0x47	; 71
    1f96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f9a:	18 16       	cp	r1, r24
    1f9c:	4c f5       	brge	.+82     	; 0x1ff0 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9e:	69 8d       	ldd	r22, Y+25	; 0x19
    1fa0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fa2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fa4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	40 e2       	ldi	r20, 0x20	; 32
    1fac:	51 e4       	ldi	r21, 0x41	; 65
    1fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	bc 01       	movw	r22, r24
    1fb8:	cd 01       	movw	r24, r26
    1fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	9c 8b       	std	Y+20, r25	; 0x14
    1fc4:	8b 8b       	std	Y+19, r24	; 0x13
    1fc6:	0f c0       	rjmp	.+30     	; 0x1fe6 <LCD_sendCommand+0x2ac>
    1fc8:	88 ec       	ldi	r24, 0xC8	; 200
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	9a 8b       	std	Y+18, r25	; 0x12
    1fce:	89 8b       	std	Y+17, r24	; 0x11
    1fd0:	89 89       	ldd	r24, Y+17	; 0x11
    1fd2:	9a 89       	ldd	r25, Y+18	; 0x12
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	f1 f7       	brne	.-4      	; 0x1fd4 <LCD_sendCommand+0x29a>
    1fd8:	9a 8b       	std	Y+18, r25	; 0x12
    1fda:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1fde:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	9c 8b       	std	Y+20, r25	; 0x14
    1fe4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	69 f7       	brne	.-38     	; 0x1fc8 <LCD_sendCommand+0x28e>
    1fee:	14 c0       	rjmp	.+40     	; 0x2018 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	9c 8b       	std	Y+20, r25	; 0x14
    2002:	8b 8b       	std	Y+19, r24	; 0x13
    2004:	8b 89       	ldd	r24, Y+19	; 0x13
    2006:	9c 89       	ldd	r25, Y+20	; 0x14
    2008:	98 8b       	std	Y+16, r25	; 0x10
    200a:	8f 87       	std	Y+15, r24	; 0x0f
    200c:	8f 85       	ldd	r24, Y+15	; 0x0f
    200e:	98 89       	ldd	r25, Y+16	; 0x10
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <LCD_sendCommand+0x2d6>
    2014:	98 8b       	std	Y+16, r25	; 0x10
    2016:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	61 e0       	ldi	r22, 0x01	; 1
    201c:	40 e0       	ldi	r20, 0x00	; 0
    201e:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_writePin>
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	a0 e8       	ldi	r26, 0x80	; 128
    2028:	bf e3       	ldi	r27, 0x3F	; 63
    202a:	8b 87       	std	Y+11, r24	; 0x0b
    202c:	9c 87       	std	Y+12, r25	; 0x0c
    202e:	ad 87       	std	Y+13, r26	; 0x0d
    2030:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2032:	6b 85       	ldd	r22, Y+11	; 0x0b
    2034:	7c 85       	ldd	r23, Y+12	; 0x0c
    2036:	8d 85       	ldd	r24, Y+13	; 0x0d
    2038:	9e 85       	ldd	r25, Y+14	; 0x0e
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	4a ef       	ldi	r20, 0xFA	; 250
    2040:	54 e4       	ldi	r21, 0x44	; 68
    2042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	8f 83       	std	Y+7, r24	; 0x07
    204c:	98 87       	std	Y+8, r25	; 0x08
    204e:	a9 87       	std	Y+9, r26	; 0x09
    2050:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2052:	6f 81       	ldd	r22, Y+7	; 0x07
    2054:	78 85       	ldd	r23, Y+8	; 0x08
    2056:	89 85       	ldd	r24, Y+9	; 0x09
    2058:	9a 85       	ldd	r25, Y+10	; 0x0a
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e8       	ldi	r20, 0x80	; 128
    2060:	5f e3       	ldi	r21, 0x3F	; 63
    2062:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2066:	88 23       	and	r24, r24
    2068:	2c f4       	brge	.+10     	; 0x2074 <LCD_sendCommand+0x33a>
		__ticks = 1;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	9e 83       	std	Y+6, r25	; 0x06
    2070:	8d 83       	std	Y+5, r24	; 0x05
    2072:	3f c0       	rjmp	.+126    	; 0x20f2 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2074:	6f 81       	ldd	r22, Y+7	; 0x07
    2076:	78 85       	ldd	r23, Y+8	; 0x08
    2078:	89 85       	ldd	r24, Y+9	; 0x09
    207a:	9a 85       	ldd	r25, Y+10	; 0x0a
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	3f ef       	ldi	r19, 0xFF	; 255
    2080:	4f e7       	ldi	r20, 0x7F	; 127
    2082:	57 e4       	ldi	r21, 0x47	; 71
    2084:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2088:	18 16       	cp	r1, r24
    208a:	4c f5       	brge	.+82     	; 0x20de <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208c:	6b 85       	ldd	r22, Y+11	; 0x0b
    208e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2090:	8d 85       	ldd	r24, Y+13	; 0x0d
    2092:	9e 85       	ldd	r25, Y+14	; 0x0e
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e2       	ldi	r20, 0x20	; 32
    209a:	51 e4       	ldi	r21, 0x41	; 65
    209c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	bc 01       	movw	r22, r24
    20a6:	cd 01       	movw	r24, r26
    20a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	9e 83       	std	Y+6, r25	; 0x06
    20b2:	8d 83       	std	Y+5, r24	; 0x05
    20b4:	0f c0       	rjmp	.+30     	; 0x20d4 <LCD_sendCommand+0x39a>
    20b6:	88 ec       	ldi	r24, 0xC8	; 200
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	9c 83       	std	Y+4, r25	; 0x04
    20bc:	8b 83       	std	Y+3, r24	; 0x03
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	9c 81       	ldd	r25, Y+4	; 0x04
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <LCD_sendCommand+0x388>
    20c6:	9c 83       	std	Y+4, r25	; 0x04
    20c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	9e 81       	ldd	r25, Y+6	; 0x06
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	9e 83       	std	Y+6, r25	; 0x06
    20d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d4:	8d 81       	ldd	r24, Y+5	; 0x05
    20d6:	9e 81       	ldd	r25, Y+6	; 0x06
    20d8:	00 97       	sbiw	r24, 0x00	; 0
    20da:	69 f7       	brne	.-38     	; 0x20b6 <LCD_sendCommand+0x37c>
    20dc:	14 c0       	rjmp	.+40     	; 0x2106 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20de:	6f 81       	ldd	r22, Y+7	; 0x07
    20e0:	78 85       	ldd	r23, Y+8	; 0x08
    20e2:	89 85       	ldd	r24, Y+9	; 0x09
    20e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	9e 83       	std	Y+6, r25	; 0x06
    20f0:	8d 83       	std	Y+5, r24	; 0x05
    20f2:	8d 81       	ldd	r24, Y+5	; 0x05
    20f4:	9e 81       	ldd	r25, Y+6	; 0x06
    20f6:	9a 83       	std	Y+2, r25	; 0x02
    20f8:	89 83       	std	Y+1, r24	; 0x01
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	9a 81       	ldd	r25, Y+2	; 0x02
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <LCD_sendCommand+0x3c4>
    2102:	9a 83       	std	Y+2, r25	; 0x02
    2104:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2106:	e9 96       	adiw	r28, 0x39	; 57
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	de bf       	out	0x3e, r29	; 62
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	cd bf       	out	0x3d, r28	; 61
    2112:	cf 91       	pop	r28
    2114:	df 91       	pop	r29
    2116:	08 95       	ret

00002118 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	e9 97       	sbiw	r28, 0x39	; 57
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	60 e0       	ldi	r22, 0x00	; 0
    2132:	41 e0       	ldi	r20, 0x01	; 1
    2134:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_writePin>
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	a0 e8       	ldi	r26, 0x80	; 128
    213e:	bf e3       	ldi	r27, 0x3F	; 63
    2140:	8d ab       	std	Y+53, r24	; 0x35
    2142:	9e ab       	std	Y+54, r25	; 0x36
    2144:	af ab       	std	Y+55, r26	; 0x37
    2146:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2148:	6d a9       	ldd	r22, Y+53	; 0x35
    214a:	7e a9       	ldd	r23, Y+54	; 0x36
    214c:	8f a9       	ldd	r24, Y+55	; 0x37
    214e:	98 ad       	ldd	r25, Y+56	; 0x38
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	4a ef       	ldi	r20, 0xFA	; 250
    2156:	54 e4       	ldi	r21, 0x44	; 68
    2158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	89 ab       	std	Y+49, r24	; 0x31
    2162:	9a ab       	std	Y+50, r25	; 0x32
    2164:	ab ab       	std	Y+51, r26	; 0x33
    2166:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2168:	69 a9       	ldd	r22, Y+49	; 0x31
    216a:	7a a9       	ldd	r23, Y+50	; 0x32
    216c:	8b a9       	ldd	r24, Y+51	; 0x33
    216e:	9c a9       	ldd	r25, Y+52	; 0x34
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e8       	ldi	r20, 0x80	; 128
    2176:	5f e3       	ldi	r21, 0x3F	; 63
    2178:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    217c:	88 23       	and	r24, r24
    217e:	2c f4       	brge	.+10     	; 0x218a <LCD_displayCharacter+0x72>
		__ticks = 1;
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	98 ab       	std	Y+48, r25	; 0x30
    2186:	8f a7       	std	Y+47, r24	; 0x2f
    2188:	3f c0       	rjmp	.+126    	; 0x2208 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    218a:	69 a9       	ldd	r22, Y+49	; 0x31
    218c:	7a a9       	ldd	r23, Y+50	; 0x32
    218e:	8b a9       	ldd	r24, Y+51	; 0x33
    2190:	9c a9       	ldd	r25, Y+52	; 0x34
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	3f ef       	ldi	r19, 0xFF	; 255
    2196:	4f e7       	ldi	r20, 0x7F	; 127
    2198:	57 e4       	ldi	r21, 0x47	; 71
    219a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    219e:	18 16       	cp	r1, r24
    21a0:	4c f5       	brge	.+82     	; 0x21f4 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a2:	6d a9       	ldd	r22, Y+53	; 0x35
    21a4:	7e a9       	ldd	r23, Y+54	; 0x36
    21a6:	8f a9       	ldd	r24, Y+55	; 0x37
    21a8:	98 ad       	ldd	r25, Y+56	; 0x38
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e2       	ldi	r20, 0x20	; 32
    21b0:	51 e4       	ldi	r21, 0x41	; 65
    21b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	bc 01       	movw	r22, r24
    21bc:	cd 01       	movw	r24, r26
    21be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	98 ab       	std	Y+48, r25	; 0x30
    21c8:	8f a7       	std	Y+47, r24	; 0x2f
    21ca:	0f c0       	rjmp	.+30     	; 0x21ea <LCD_displayCharacter+0xd2>
    21cc:	88 ec       	ldi	r24, 0xC8	; 200
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	9e a7       	std	Y+46, r25	; 0x2e
    21d2:	8d a7       	std	Y+45, r24	; 0x2d
    21d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    21d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <LCD_displayCharacter+0xc0>
    21dc:	9e a7       	std	Y+46, r25	; 0x2e
    21de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21e2:	98 a9       	ldd	r25, Y+48	; 0x30
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	98 ab       	std	Y+48, r25	; 0x30
    21e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ec:	98 a9       	ldd	r25, Y+48	; 0x30
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	69 f7       	brne	.-38     	; 0x21cc <LCD_displayCharacter+0xb4>
    21f2:	14 c0       	rjmp	.+40     	; 0x221c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f4:	69 a9       	ldd	r22, Y+49	; 0x31
    21f6:	7a a9       	ldd	r23, Y+50	; 0x32
    21f8:	8b a9       	ldd	r24, Y+51	; 0x33
    21fa:	9c a9       	ldd	r25, Y+52	; 0x34
    21fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	98 ab       	std	Y+48, r25	; 0x30
    2206:	8f a7       	std	Y+47, r24	; 0x2f
    2208:	8f a5       	ldd	r24, Y+47	; 0x2f
    220a:	98 a9       	ldd	r25, Y+48	; 0x30
    220c:	9c a7       	std	Y+44, r25	; 0x2c
    220e:	8b a7       	std	Y+43, r24	; 0x2b
    2210:	8b a5       	ldd	r24, Y+43	; 0x2b
    2212:	9c a5       	ldd	r25, Y+44	; 0x2c
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <LCD_displayCharacter+0xfc>
    2218:	9c a7       	std	Y+44, r25	; 0x2c
    221a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	61 e0       	ldi	r22, 0x01	; 1
    2220:	41 e0       	ldi	r20, 0x01	; 1
    2222:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_writePin>
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	a0 e8       	ldi	r26, 0x80	; 128
    222c:	bf e3       	ldi	r27, 0x3F	; 63
    222e:	8f a3       	std	Y+39, r24	; 0x27
    2230:	98 a7       	std	Y+40, r25	; 0x28
    2232:	a9 a7       	std	Y+41, r26	; 0x29
    2234:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2236:	6f a1       	ldd	r22, Y+39	; 0x27
    2238:	78 a5       	ldd	r23, Y+40	; 0x28
    223a:	89 a5       	ldd	r24, Y+41	; 0x29
    223c:	9a a5       	ldd	r25, Y+42	; 0x2a
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	4a ef       	ldi	r20, 0xFA	; 250
    2244:	54 e4       	ldi	r21, 0x44	; 68
    2246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	8b a3       	std	Y+35, r24	; 0x23
    2250:	9c a3       	std	Y+36, r25	; 0x24
    2252:	ad a3       	std	Y+37, r26	; 0x25
    2254:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2256:	6b a1       	ldd	r22, Y+35	; 0x23
    2258:	7c a1       	ldd	r23, Y+36	; 0x24
    225a:	8d a1       	ldd	r24, Y+37	; 0x25
    225c:	9e a1       	ldd	r25, Y+38	; 0x26
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	40 e8       	ldi	r20, 0x80	; 128
    2264:	5f e3       	ldi	r21, 0x3F	; 63
    2266:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    226a:	88 23       	and	r24, r24
    226c:	2c f4       	brge	.+10     	; 0x2278 <LCD_displayCharacter+0x160>
		__ticks = 1;
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	9a a3       	std	Y+34, r25	; 0x22
    2274:	89 a3       	std	Y+33, r24	; 0x21
    2276:	3f c0       	rjmp	.+126    	; 0x22f6 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2278:	6b a1       	ldd	r22, Y+35	; 0x23
    227a:	7c a1       	ldd	r23, Y+36	; 0x24
    227c:	8d a1       	ldd	r24, Y+37	; 0x25
    227e:	9e a1       	ldd	r25, Y+38	; 0x26
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	3f ef       	ldi	r19, 0xFF	; 255
    2284:	4f e7       	ldi	r20, 0x7F	; 127
    2286:	57 e4       	ldi	r21, 0x47	; 71
    2288:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    228c:	18 16       	cp	r1, r24
    228e:	4c f5       	brge	.+82     	; 0x22e2 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2290:	6f a1       	ldd	r22, Y+39	; 0x27
    2292:	78 a5       	ldd	r23, Y+40	; 0x28
    2294:	89 a5       	ldd	r24, Y+41	; 0x29
    2296:	9a a5       	ldd	r25, Y+42	; 0x2a
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e2       	ldi	r20, 0x20	; 32
    229e:	51 e4       	ldi	r21, 0x41	; 65
    22a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	bc 01       	movw	r22, r24
    22aa:	cd 01       	movw	r24, r26
    22ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	9a a3       	std	Y+34, r25	; 0x22
    22b6:	89 a3       	std	Y+33, r24	; 0x21
    22b8:	0f c0       	rjmp	.+30     	; 0x22d8 <LCD_displayCharacter+0x1c0>
    22ba:	88 ec       	ldi	r24, 0xC8	; 200
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	98 a3       	std	Y+32, r25	; 0x20
    22c0:	8f 8f       	std	Y+31, r24	; 0x1f
    22c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22c4:	98 a1       	ldd	r25, Y+32	; 0x20
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	f1 f7       	brne	.-4      	; 0x22c6 <LCD_displayCharacter+0x1ae>
    22ca:	98 a3       	std	Y+32, r25	; 0x20
    22cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ce:	89 a1       	ldd	r24, Y+33	; 0x21
    22d0:	9a a1       	ldd	r25, Y+34	; 0x22
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	9a a3       	std	Y+34, r25	; 0x22
    22d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d8:	89 a1       	ldd	r24, Y+33	; 0x21
    22da:	9a a1       	ldd	r25, Y+34	; 0x22
    22dc:	00 97       	sbiw	r24, 0x00	; 0
    22de:	69 f7       	brne	.-38     	; 0x22ba <LCD_displayCharacter+0x1a2>
    22e0:	14 c0       	rjmp	.+40     	; 0x230a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e2:	6b a1       	ldd	r22, Y+35	; 0x23
    22e4:	7c a1       	ldd	r23, Y+36	; 0x24
    22e6:	8d a1       	ldd	r24, Y+37	; 0x25
    22e8:	9e a1       	ldd	r25, Y+38	; 0x26
    22ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	9a a3       	std	Y+34, r25	; 0x22
    22f4:	89 a3       	std	Y+33, r24	; 0x21
    22f6:	89 a1       	ldd	r24, Y+33	; 0x21
    22f8:	9a a1       	ldd	r25, Y+34	; 0x22
    22fa:	9e 8f       	std	Y+30, r25	; 0x1e
    22fc:	8d 8f       	std	Y+29, r24	; 0x1d
    22fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2300:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	f1 f7       	brne	.-4      	; 0x2302 <LCD_displayCharacter+0x1ea>
    2306:	9e 8f       	std	Y+30, r25	; 0x1e
    2308:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	69 ad       	ldd	r22, Y+57	; 0x39
    230e:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <GPIO_writePort>
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	a0 e8       	ldi	r26, 0x80	; 128
    2318:	bf e3       	ldi	r27, 0x3F	; 63
    231a:	89 8f       	std	Y+25, r24	; 0x19
    231c:	9a 8f       	std	Y+26, r25	; 0x1a
    231e:	ab 8f       	std	Y+27, r26	; 0x1b
    2320:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2322:	69 8d       	ldd	r22, Y+25	; 0x19
    2324:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2326:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2328:	9c 8d       	ldd	r25, Y+28	; 0x1c
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	4a ef       	ldi	r20, 0xFA	; 250
    2330:	54 e4       	ldi	r21, 0x44	; 68
    2332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	8d 8b       	std	Y+21, r24	; 0x15
    233c:	9e 8b       	std	Y+22, r25	; 0x16
    233e:	af 8b       	std	Y+23, r26	; 0x17
    2340:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2342:	6d 89       	ldd	r22, Y+21	; 0x15
    2344:	7e 89       	ldd	r23, Y+22	; 0x16
    2346:	8f 89       	ldd	r24, Y+23	; 0x17
    2348:	98 8d       	ldd	r25, Y+24	; 0x18
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e8       	ldi	r20, 0x80	; 128
    2350:	5f e3       	ldi	r21, 0x3F	; 63
    2352:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2356:	88 23       	and	r24, r24
    2358:	2c f4       	brge	.+10     	; 0x2364 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	9c 8b       	std	Y+20, r25	; 0x14
    2360:	8b 8b       	std	Y+19, r24	; 0x13
    2362:	3f c0       	rjmp	.+126    	; 0x23e2 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2364:	6d 89       	ldd	r22, Y+21	; 0x15
    2366:	7e 89       	ldd	r23, Y+22	; 0x16
    2368:	8f 89       	ldd	r24, Y+23	; 0x17
    236a:	98 8d       	ldd	r25, Y+24	; 0x18
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	3f ef       	ldi	r19, 0xFF	; 255
    2370:	4f e7       	ldi	r20, 0x7F	; 127
    2372:	57 e4       	ldi	r21, 0x47	; 71
    2374:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2378:	18 16       	cp	r1, r24
    237a:	4c f5       	brge	.+82     	; 0x23ce <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237c:	69 8d       	ldd	r22, Y+25	; 0x19
    237e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2380:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2382:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e2       	ldi	r20, 0x20	; 32
    238a:	51 e4       	ldi	r21, 0x41	; 65
    238c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	bc 01       	movw	r22, r24
    2396:	cd 01       	movw	r24, r26
    2398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	9c 8b       	std	Y+20, r25	; 0x14
    23a2:	8b 8b       	std	Y+19, r24	; 0x13
    23a4:	0f c0       	rjmp	.+30     	; 0x23c4 <LCD_displayCharacter+0x2ac>
    23a6:	88 ec       	ldi	r24, 0xC8	; 200
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	9a 8b       	std	Y+18, r25	; 0x12
    23ac:	89 8b       	std	Y+17, r24	; 0x11
    23ae:	89 89       	ldd	r24, Y+17	; 0x11
    23b0:	9a 89       	ldd	r25, Y+18	; 0x12
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <LCD_displayCharacter+0x29a>
    23b6:	9a 8b       	std	Y+18, r25	; 0x12
    23b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ba:	8b 89       	ldd	r24, Y+19	; 0x13
    23bc:	9c 89       	ldd	r25, Y+20	; 0x14
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	9c 8b       	std	Y+20, r25	; 0x14
    23c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c4:	8b 89       	ldd	r24, Y+19	; 0x13
    23c6:	9c 89       	ldd	r25, Y+20	; 0x14
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	69 f7       	brne	.-38     	; 0x23a6 <LCD_displayCharacter+0x28e>
    23cc:	14 c0       	rjmp	.+40     	; 0x23f6 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ce:	6d 89       	ldd	r22, Y+21	; 0x15
    23d0:	7e 89       	ldd	r23, Y+22	; 0x16
    23d2:	8f 89       	ldd	r24, Y+23	; 0x17
    23d4:	98 8d       	ldd	r25, Y+24	; 0x18
    23d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	9c 8b       	std	Y+20, r25	; 0x14
    23e0:	8b 8b       	std	Y+19, r24	; 0x13
    23e2:	8b 89       	ldd	r24, Y+19	; 0x13
    23e4:	9c 89       	ldd	r25, Y+20	; 0x14
    23e6:	98 8b       	std	Y+16, r25	; 0x10
    23e8:	8f 87       	std	Y+15, r24	; 0x0f
    23ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ec:	98 89       	ldd	r25, Y+16	; 0x10
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <LCD_displayCharacter+0x2d6>
    23f2:	98 8b       	std	Y+16, r25	; 0x10
    23f4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	61 e0       	ldi	r22, 0x01	; 1
    23fa:	40 e0       	ldi	r20, 0x00	; 0
    23fc:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_writePin>
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	a0 e8       	ldi	r26, 0x80	; 128
    2406:	bf e3       	ldi	r27, 0x3F	; 63
    2408:	8b 87       	std	Y+11, r24	; 0x0b
    240a:	9c 87       	std	Y+12, r25	; 0x0c
    240c:	ad 87       	std	Y+13, r26	; 0x0d
    240e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2410:	6b 85       	ldd	r22, Y+11	; 0x0b
    2412:	7c 85       	ldd	r23, Y+12	; 0x0c
    2414:	8d 85       	ldd	r24, Y+13	; 0x0d
    2416:	9e 85       	ldd	r25, Y+14	; 0x0e
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	4a ef       	ldi	r20, 0xFA	; 250
    241e:	54 e4       	ldi	r21, 0x44	; 68
    2420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	8f 83       	std	Y+7, r24	; 0x07
    242a:	98 87       	std	Y+8, r25	; 0x08
    242c:	a9 87       	std	Y+9, r26	; 0x09
    242e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2430:	6f 81       	ldd	r22, Y+7	; 0x07
    2432:	78 85       	ldd	r23, Y+8	; 0x08
    2434:	89 85       	ldd	r24, Y+9	; 0x09
    2436:	9a 85       	ldd	r25, Y+10	; 0x0a
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 e8       	ldi	r20, 0x80	; 128
    243e:	5f e3       	ldi	r21, 0x3F	; 63
    2440:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2444:	88 23       	and	r24, r24
    2446:	2c f4       	brge	.+10     	; 0x2452 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	9e 83       	std	Y+6, r25	; 0x06
    244e:	8d 83       	std	Y+5, r24	; 0x05
    2450:	3f c0       	rjmp	.+126    	; 0x24d0 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2452:	6f 81       	ldd	r22, Y+7	; 0x07
    2454:	78 85       	ldd	r23, Y+8	; 0x08
    2456:	89 85       	ldd	r24, Y+9	; 0x09
    2458:	9a 85       	ldd	r25, Y+10	; 0x0a
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	3f ef       	ldi	r19, 0xFF	; 255
    245e:	4f e7       	ldi	r20, 0x7F	; 127
    2460:	57 e4       	ldi	r21, 0x47	; 71
    2462:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2466:	18 16       	cp	r1, r24
    2468:	4c f5       	brge	.+82     	; 0x24bc <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246a:	6b 85       	ldd	r22, Y+11	; 0x0b
    246c:	7c 85       	ldd	r23, Y+12	; 0x0c
    246e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2470:	9e 85       	ldd	r25, Y+14	; 0x0e
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e2       	ldi	r20, 0x20	; 32
    2478:	51 e4       	ldi	r21, 0x41	; 65
    247a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	9e 83       	std	Y+6, r25	; 0x06
    2490:	8d 83       	std	Y+5, r24	; 0x05
    2492:	0f c0       	rjmp	.+30     	; 0x24b2 <LCD_displayCharacter+0x39a>
    2494:	88 ec       	ldi	r24, 0xC8	; 200
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	9c 83       	std	Y+4, r25	; 0x04
    249a:	8b 83       	std	Y+3, r24	; 0x03
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	9c 81       	ldd	r25, Y+4	; 0x04
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	f1 f7       	brne	.-4      	; 0x24a0 <LCD_displayCharacter+0x388>
    24a4:	9c 83       	std	Y+4, r25	; 0x04
    24a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a8:	8d 81       	ldd	r24, Y+5	; 0x05
    24aa:	9e 81       	ldd	r25, Y+6	; 0x06
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	9e 83       	std	Y+6, r25	; 0x06
    24b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b2:	8d 81       	ldd	r24, Y+5	; 0x05
    24b4:	9e 81       	ldd	r25, Y+6	; 0x06
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	69 f7       	brne	.-38     	; 0x2494 <LCD_displayCharacter+0x37c>
    24ba:	14 c0       	rjmp	.+40     	; 0x24e4 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24bc:	6f 81       	ldd	r22, Y+7	; 0x07
    24be:	78 85       	ldd	r23, Y+8	; 0x08
    24c0:	89 85       	ldd	r24, Y+9	; 0x09
    24c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	9e 83       	std	Y+6, r25	; 0x06
    24ce:	8d 83       	std	Y+5, r24	; 0x05
    24d0:	8d 81       	ldd	r24, Y+5	; 0x05
    24d2:	9e 81       	ldd	r25, Y+6	; 0x06
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	89 83       	std	Y+1, r24	; 0x01
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	9a 81       	ldd	r25, Y+2	; 0x02
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	f1 f7       	brne	.-4      	; 0x24dc <LCD_displayCharacter+0x3c4>
    24e0:	9a 83       	std	Y+2, r25	; 0x02
    24e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    24e4:	e9 96       	adiw	r28, 0x39	; 57
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	f8 94       	cli
    24ea:	de bf       	out	0x3e, r29	; 62
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	cd bf       	out	0x3d, r28	; 61
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	08 95       	ret

000024f6 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	00 d0       	rcall	.+0      	; 0x24fc <LCD_displayString+0x6>
    24fc:	0f 92       	push	r0
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	9b 83       	std	Y+3, r25	; 0x03
    2504:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2506:	19 82       	std	Y+1, r1	; 0x01
    2508:	0e c0       	rjmp	.+28     	; 0x2526 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	8a 81       	ldd	r24, Y+2	; 0x02
    2512:	9b 81       	ldd	r25, Y+3	; 0x03
    2514:	fc 01       	movw	r30, r24
    2516:	e2 0f       	add	r30, r18
    2518:	f3 1f       	adc	r31, r19
    251a:	80 81       	ld	r24, Z
    251c:	0e 94 8c 10 	call	0x2118	; 0x2118 <LCD_displayCharacter>
		i++;
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	8f 5f       	subi	r24, 0xFF	; 255
    2524:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	28 2f       	mov	r18, r24
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	8a 81       	ldd	r24, Y+2	; 0x02
    252e:	9b 81       	ldd	r25, Y+3	; 0x03
    2530:	fc 01       	movw	r30, r24
    2532:	e2 0f       	add	r30, r18
    2534:	f3 1f       	adc	r31, r19
    2536:	80 81       	ld	r24, Z
    2538:	88 23       	and	r24, r24
    253a:	39 f7       	brne	.-50     	; 0x250a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	cf 91       	pop	r28
    2544:	df 91       	pop	r29
    2546:	08 95       	ret

00002548 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	00 d0       	rcall	.+0      	; 0x254e <LCD_moveCursor+0x6>
    254e:	00 d0       	rcall	.+0      	; 0x2550 <LCD_moveCursor+0x8>
    2550:	0f 92       	push	r0
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    2556:	8a 83       	std	Y+2, r24	; 0x02
    2558:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	28 2f       	mov	r18, r24
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	3d 83       	std	Y+5, r19	; 0x05
    2562:	2c 83       	std	Y+4, r18	; 0x04
    2564:	8c 81       	ldd	r24, Y+4	; 0x04
    2566:	9d 81       	ldd	r25, Y+5	; 0x05
    2568:	81 30       	cpi	r24, 0x01	; 1
    256a:	91 05       	cpc	r25, r1
    256c:	c1 f0       	breq	.+48     	; 0x259e <LCD_moveCursor+0x56>
    256e:	2c 81       	ldd	r18, Y+4	; 0x04
    2570:	3d 81       	ldd	r19, Y+5	; 0x05
    2572:	22 30       	cpi	r18, 0x02	; 2
    2574:	31 05       	cpc	r19, r1
    2576:	2c f4       	brge	.+10     	; 0x2582 <LCD_moveCursor+0x3a>
    2578:	8c 81       	ldd	r24, Y+4	; 0x04
    257a:	9d 81       	ldd	r25, Y+5	; 0x05
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	61 f0       	breq	.+24     	; 0x2598 <LCD_moveCursor+0x50>
    2580:	19 c0       	rjmp	.+50     	; 0x25b4 <LCD_moveCursor+0x6c>
    2582:	2c 81       	ldd	r18, Y+4	; 0x04
    2584:	3d 81       	ldd	r19, Y+5	; 0x05
    2586:	22 30       	cpi	r18, 0x02	; 2
    2588:	31 05       	cpc	r19, r1
    258a:	69 f0       	breq	.+26     	; 0x25a6 <LCD_moveCursor+0x5e>
    258c:	8c 81       	ldd	r24, Y+4	; 0x04
    258e:	9d 81       	ldd	r25, Y+5	; 0x05
    2590:	83 30       	cpi	r24, 0x03	; 3
    2592:	91 05       	cpc	r25, r1
    2594:	61 f0       	breq	.+24     	; 0x25ae <LCD_moveCursor+0x66>
    2596:	0e c0       	rjmp	.+28     	; 0x25b4 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2598:	8b 81       	ldd	r24, Y+3	; 0x03
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	0b c0       	rjmp	.+22     	; 0x25b4 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	80 5c       	subi	r24, 0xC0	; 192
    25a2:	89 83       	std	Y+1, r24	; 0x01
    25a4:	07 c0       	rjmp	.+14     	; 0x25b4 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    25a6:	8b 81       	ldd	r24, Y+3	; 0x03
    25a8:	80 5f       	subi	r24, 0xF0	; 240
    25aa:	89 83       	std	Y+1, r24	; 0x01
    25ac:	03 c0       	rjmp	.+6      	; 0x25b4 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	80 5b       	subi	r24, 0xB0	; 176
    25b2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	80 68       	ori	r24, 0x80	; 128
    25b8:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_sendCommand>
}
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <LCD_displayStringRowColumn+0x6>
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <LCD_displayStringRowColumn+0x8>
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
    25d8:	89 83       	std	Y+1, r24	; 0x01
    25da:	6a 83       	std	Y+2, r22	; 0x02
    25dc:	5c 83       	std	Y+4, r21	; 0x04
    25de:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	6a 81       	ldd	r22, Y+2	; 0x02
    25e4:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	9c 81       	ldd	r25, Y+4	; 0x04
    25ec:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <LCD_displayString>
}
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	cf 91       	pop	r28
    25fa:	df 91       	pop	r29
    25fc:	08 95       	ret

000025fe <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    25fe:	df 93       	push	r29
    2600:	cf 93       	push	r28
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	62 97       	sbiw	r28, 0x12	; 18
    2608:	0f b6       	in	r0, 0x3f	; 63
    260a:	f8 94       	cli
    260c:	de bf       	out	0x3e, r29	; 62
    260e:	0f be       	out	0x3f, r0	; 63
    2610:	cd bf       	out	0x3d, r28	; 61
    2612:	9a 8b       	std	Y+18, r25	; 0x12
    2614:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2616:	89 89       	ldd	r24, Y+17	; 0x11
    2618:	9a 89       	ldd	r25, Y+18	; 0x12
    261a:	9e 01       	movw	r18, r28
    261c:	2f 5f       	subi	r18, 0xFF	; 255
    261e:	3f 4f       	sbci	r19, 0xFF	; 255
    2620:	b9 01       	movw	r22, r18
    2622:	4a e0       	ldi	r20, 0x0A	; 10
    2624:	50 e0       	ldi	r21, 0x00	; 0
    2626:	0e 94 39 16 	call	0x2c72	; 0x2c72 <itoa>
   LCD_displayString(buff); /* Display the string */
    262a:	ce 01       	movw	r24, r28
    262c:	01 96       	adiw	r24, 0x01	; 1
    262e:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <LCD_displayString>
}
    2632:	62 96       	adiw	r28, 0x12	; 18
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	de bf       	out	0x3e, r29	; 62
    263a:	0f be       	out	0x3f, r0	; 63
    263c:	cd bf       	out	0x3d, r28	; 61
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_sendCommand>
}
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <PWM_Timer0_Start>:
/*
 * Description :
 * The function responsible for trigger the Timer0 with the PWM Mode.
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	0f 92       	push	r0
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT); /* set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC */
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	63 e0       	ldi	r22, 0x03	; 3
    2668:	41 e0       	ldi	r20, 0x01	; 1
    266a:	0e 94 c3 0a 	call	0x1586	; 0x1586 <GPIO_setupPinDirection>

	TCNT0 = 0; /* Set Timer Initial Value */
    266e:	e2 e5       	ldi	r30, 0x52	; 82
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	10 82       	st	Z, r1
	OCR0  = duty_cycle; /* Set Compare Value */
    2674:	ec e5       	ldi	r30, 0x5C	; 92
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	80 83       	st	Z, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/64 CS00=1 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01) | (1<<CS00);
    267c:	e3 e5       	ldi	r30, 0x53	; 83
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	8b e6       	ldi	r24, 0x6B	; 107
    2682:	80 83       	st	Z, r24
}
    2684:	0f 90       	pop	r0
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <__vector_7>:
}
#endif

#ifdef COMPARE_MODE_A
ISR(TIMER1_COMPA_vect)
{
    268c:	1f 92       	push	r1
    268e:	0f 92       	push	r0
    2690:	0f b6       	in	r0, 0x3f	; 63
    2692:	0f 92       	push	r0
    2694:	11 24       	eor	r1, r1
    2696:	2f 93       	push	r18
    2698:	3f 93       	push	r19
    269a:	4f 93       	push	r20
    269c:	5f 93       	push	r21
    269e:	6f 93       	push	r22
    26a0:	7f 93       	push	r23
    26a2:	8f 93       	push	r24
    26a4:	9f 93       	push	r25
    26a6:	af 93       	push	r26
    26a8:	bf 93       	push	r27
    26aa:	ef 93       	push	r30
    26ac:	ff 93       	push	r31
    26ae:	df 93       	push	r29
    26b0:	cf 93       	push	r28
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    26b6:	80 91 72 00 	lds	r24, 0x0072
    26ba:	90 91 73 00 	lds	r25, 0x0073
    26be:	00 97       	sbiw	r24, 0x00	; 0
    26c0:	29 f0       	breq	.+10     	; 0x26cc <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    26c2:	e0 91 72 00 	lds	r30, 0x0072
    26c6:	f0 91 73 00 	lds	r31, 0x0073
    26ca:	09 95       	icall
	}
}
    26cc:	cf 91       	pop	r28
    26ce:	df 91       	pop	r29
    26d0:	ff 91       	pop	r31
    26d2:	ef 91       	pop	r30
    26d4:	bf 91       	pop	r27
    26d6:	af 91       	pop	r26
    26d8:	9f 91       	pop	r25
    26da:	8f 91       	pop	r24
    26dc:	7f 91       	pop	r23
    26de:	6f 91       	pop	r22
    26e0:	5f 91       	pop	r21
    26e2:	4f 91       	pop	r20
    26e4:	3f 91       	pop	r19
    26e6:	2f 91       	pop	r18
    26e8:	0f 90       	pop	r0
    26ea:	0f be       	out	0x3f, r0	; 63
    26ec:	0f 90       	pop	r0
    26ee:	1f 90       	pop	r1
    26f0:	18 95       	reti

000026f2 <Timer1_init>:
/*
 * Description :
 *
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	00 d0       	rcall	.+0      	; 0x26f8 <Timer1_init+0x6>
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
    26fc:	9a 83       	std	Y+2, r25	; 0x02
    26fe:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = (TCCR1A & 0xFC) | ((Config_Ptr->mode) & 0x03);
    2700:	af e4       	ldi	r26, 0x4F	; 79
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	ef e4       	ldi	r30, 0x4F	; 79
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	98 2f       	mov	r25, r24
    270c:	9c 7f       	andi	r25, 0xFC	; 252
    270e:	e9 81       	ldd	r30, Y+1	; 0x01
    2710:	fa 81       	ldd	r31, Y+2	; 0x02
    2712:	85 81       	ldd	r24, Z+5	; 0x05
    2714:	83 70       	andi	r24, 0x03	; 3
    2716:	89 2b       	or	r24, r25
    2718:	8c 93       	st	X, r24

#ifdef PWM_MODE_A
	CLEAR_BIT(TCCR1A,FOC1A);
#else
	SET_BIT(TCCR1A,FOC1A);
    271a:	af e4       	ldi	r26, 0x4F	; 79
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	ef e4       	ldi	r30, 0x4F	; 79
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	88 60       	ori	r24, 0x08	; 8
    2726:	8c 93       	st	X, r24
#endif

#ifdef PWM_MODE_B
	CLEAR_BIT(TCCR1A,FOC1B);
#else
	SET_BIT(TCCR1A,FOC1B);
    2728:	af e4       	ldi	r26, 0x4F	; 79
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	ef e4       	ldi	r30, 0x4F	; 79
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	84 60       	ori	r24, 0x04	; 4
    2734:	8c 93       	st	X, r24
	TCCR1A |= (TCCR1A & 0xCF) | (COM1B << 4);
	GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT); /* OC1B */
	GPIO_writePin(PORTD_ID, PIN4_ID, LOGIC_LOW);
#endif

	TCCR1B = (TCCR1B & 0xE7) | (((Config_Ptr->mode) & 0x0C) << 1) | (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    2736:	ae e4       	ldi	r26, 0x4E	; 78
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	ee e4       	ldi	r30, 0x4E	; 78
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	80 81       	ld	r24, Z
    2740:	28 2f       	mov	r18, r24
    2742:	27 7e       	andi	r18, 0xE7	; 231
    2744:	e9 81       	ldd	r30, Y+1	; 0x01
    2746:	fa 81       	ldd	r31, Y+2	; 0x02
    2748:	85 81       	ldd	r24, Z+5	; 0x05
    274a:	88 2f       	mov	r24, r24
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	8c 70       	andi	r24, 0x0C	; 12
    2750:	90 70       	andi	r25, 0x00	; 0
    2752:	88 0f       	add	r24, r24
    2754:	99 1f       	adc	r25, r25
    2756:	92 2f       	mov	r25, r18
    2758:	98 2b       	or	r25, r24
    275a:	ee e4       	ldi	r30, 0x4E	; 78
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	88 7f       	andi	r24, 0xF8	; 248
    2762:	98 2b       	or	r25, r24
    2764:	e9 81       	ldd	r30, Y+1	; 0x01
    2766:	fa 81       	ldd	r31, Y+2	; 0x02
    2768:	84 81       	ldd	r24, Z+4	; 0x04
    276a:	89 2b       	or	r24, r25
    276c:	8c 93       	st	X, r24
	TCNT1 = (Config_Ptr->initial_value);
    276e:	ac e4       	ldi	r26, 0x4C	; 76
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e9 81       	ldd	r30, Y+1	; 0x01
    2774:	fa 81       	ldd	r31, Y+2	; 0x02
    2776:	80 81       	ld	r24, Z
    2778:	91 81       	ldd	r25, Z+1	; 0x01
    277a:	11 96       	adiw	r26, 0x01	; 1
    277c:	9c 93       	st	X, r25
    277e:	8e 93       	st	-X, r24
#ifdef NORMAL_MODE
	TIMSK |= (1<<TOIE1);
#endif

#ifdef COMPARE_MODE_A
	OCR1A = (Config_Ptr->compare_value);
    2780:	aa e4       	ldi	r26, 0x4A	; 74
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e9 81       	ldd	r30, Y+1	; 0x01
    2786:	fa 81       	ldd	r31, Y+2	; 0x02
    2788:	82 81       	ldd	r24, Z+2	; 0x02
    278a:	93 81       	ldd	r25, Z+3	; 0x03
    278c:	11 96       	adiw	r26, 0x01	; 1
    278e:	9c 93       	st	X, r25
    2790:	8e 93       	st	-X, r24
	TIMSK |= (1<<OCIE1A);
    2792:	a9 e5       	ldi	r26, 0x59	; 89
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	e9 e5       	ldi	r30, 0x59	; 89
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	80 61       	ori	r24, 0x10	; 16
    279e:	8c 93       	st	X, r24

#ifdef COMPARE_MODE_B
	OCR1B = (Config_Ptr->compare_value);
	TIMSK |= (1<<OCIE1B);
#endif
}
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <Timer1_deInit>:
 * Description : The function is responsible for clear all Timer1/ICU registers,
 * disable all its interrupts and reset the global pointer value to NULL.
 *
 */
void Timer1_deInit(void)
{
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    27b2:	ef e4       	ldi	r30, 0x4F	; 79
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	10 82       	st	Z, r1
	TCCR1B = 0;
    27b8:	ee e4       	ldi	r30, 0x4E	; 78
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	10 82       	st	Z, r1
	TCNT1 = 0;
    27be:	ec e4       	ldi	r30, 0x4C	; 76
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	11 82       	std	Z+1, r1	; 0x01
    27c4:	10 82       	st	Z, r1
	ICR1 = 0;
    27c6:	e6 e4       	ldi	r30, 0x46	; 70
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	11 82       	std	Z+1, r1	; 0x01
    27cc:	10 82       	st	Z, r1
	OCR1A = 0;
    27ce:	ea e4       	ldi	r30, 0x4A	; 74
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	11 82       	std	Z+1, r1	; 0x01
    27d4:	10 82       	st	Z, r1
	OCR1B = 0;
    27d6:	e8 e4       	ldi	r30, 0x48	; 72
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	11 82       	std	Z+1, r1	; 0x01
    27dc:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK, TOIE1);
    27de:	a9 e5       	ldi	r26, 0x59	; 89
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	e9 e5       	ldi	r30, 0x59	; 89
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	8b 7f       	andi	r24, 0xFB	; 251
    27ea:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE1A);
    27ec:	a9 e5       	ldi	r26, 0x59	; 89
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	e9 e5       	ldi	r30, 0x59	; 89
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	8f 7e       	andi	r24, 0xEF	; 239
    27f8:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE1B);
    27fa:	a9 e5       	ldi	r26, 0x59	; 89
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	e9 e5       	ldi	r30, 0x59	; 89
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	87 7f       	andi	r24, 0xF7	; 247
    2806:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, TICIE1);
    2808:	a9 e5       	ldi	r26, 0x59	; 89
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	e9 e5       	ldi	r30, 0x59	; 89
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	8f 7d       	andi	r24, 0xDF	; 223
    2814:	8c 93       	st	X, r24
	g_callBackPtr = NULL_PTR;
    2816:	10 92 73 00 	sts	0x0073, r1
    281a:	10 92 72 00 	sts	0x0072, r1
}
    281e:	cf 91       	pop	r28
    2820:	df 91       	pop	r29
    2822:	08 95       	ret

00002824 <Timer1_setCallBack>:
 * Description : The function is responsible for saving the address
 * of the call-back function in a global variable (pointer to function).
 *
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	00 d0       	rcall	.+0      	; 0x282a <Timer1_setCallBack+0x6>
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	9a 83       	std	Y+2, r25	; 0x02
    2830:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    2832:	89 81       	ldd	r24, Y+1	; 0x01
    2834:	9a 81       	ldd	r25, Y+2	; 0x02
    2836:	90 93 73 00 	sts	0x0073, r25
    283a:	80 93 72 00 	sts	0x0072, r24
}
    283e:	0f 90       	pop	r0
    2840:	0f 90       	pop	r0
    2842:	cf 91       	pop	r28
    2844:	df 91       	pop	r29
    2846:	08 95       	ret

00002848 <TWI_init>:
/*
 * Description :
 * Functional responsible for Setup the Prescaler, Slave Address, the Baud Rate and enable the TWI(I2C) Module.
 */
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2848:	df 93       	push	r29
    284a:	cf 93       	push	r28
    284c:	00 d0       	rcall	.+0      	; 0x284e <TWI_init+0x6>
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
    2852:	9a 83       	std	Y+2, r25	; 0x02
    2854:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = (Config_Ptr->bit_rate);
    2856:	a0 e2       	ldi	r26, 0x20	; 32
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	e9 81       	ldd	r30, Y+1	; 0x01
    285c:	fa 81       	ldd	r31, Y+2	; 0x02
    285e:	81 81       	ldd	r24, Z+1	; 0x01
    2860:	8c 93       	st	X, r24

    /* Assign the Prescaler and the remaining register zeros for the status bins */
	TWSR = ((Config_Ptr->prescaler) & 0x03);
    2862:	a1 e2       	ldi	r26, 0x21	; 33
    2864:	b0 e0       	ldi	r27, 0x00	; 0
    2866:	e9 81       	ldd	r30, Y+1	; 0x01
    2868:	fa 81       	ldd	r31, Y+2	; 0x02
    286a:	82 81       	ldd	r24, Z+2	; 0x02
    286c:	83 70       	andi	r24, 0x03	; 3
    286e:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = ((Config_Ptr->address) << 1); // my address = 0x01 :)
    2870:	a2 e2       	ldi	r26, 0x22	; 34
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	e9 81       	ldd	r30, Y+1	; 0x01
    2876:	fa 81       	ldd	r31, Y+2	; 0x02
    2878:	80 81       	ld	r24, Z
    287a:	88 0f       	add	r24, r24
    287c:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    287e:	e6 e5       	ldi	r30, 0x56	; 86
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	84 e0       	ldi	r24, 0x04	; 4
    2884:	80 83       	st	Z, r24
}
    2886:	0f 90       	pop	r0
    2888:	0f 90       	pop	r0
    288a:	cf 91       	pop	r28
    288c:	df 91       	pop	r29
    288e:	08 95       	ret

00002890 <TWI_start>:
/*
 * Description :
 * Functional responsible for Sending a Start-Bit.
 */
void TWI_start(void)
{
    2890:	df 93       	push	r29
    2892:	cf 93       	push	r28
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2898:	e6 e5       	ldi	r30, 0x56	; 86
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	84 ea       	ldi	r24, 0xA4	; 164
    289e:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    28a0:	e6 e5       	ldi	r30, 0x56	; 86
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	80 81       	ld	r24, Z
    28a6:	88 23       	and	r24, r24
    28a8:	dc f7       	brge	.-10     	; 0x28a0 <TWI_start+0x10>
}
    28aa:	cf 91       	pop	r28
    28ac:	df 91       	pop	r29
    28ae:	08 95       	ret

000028b0 <TWI_stop>:
/*
 * Description :
 * Functional responsible for Sending a Stop-Bit.
 */
void TWI_stop(void)
{
    28b0:	df 93       	push	r29
    28b2:	cf 93       	push	r28
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    28b8:	e6 e5       	ldi	r30, 0x56	; 86
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	84 e9       	ldi	r24, 0x94	; 148
    28be:	80 83       	st	Z, r24
}
    28c0:	cf 91       	pop	r28
    28c2:	df 91       	pop	r29
    28c4:	08 95       	ret

000028c6 <TWI_writeByte>:
/*
 * Description :
 * Functional responsible for Writing a byte of data by TWI.
 */
void TWI_writeByte(uint8 data)
{
    28c6:	df 93       	push	r29
    28c8:	cf 93       	push	r28
    28ca:	0f 92       	push	r0
    28cc:	cd b7       	in	r28, 0x3d	; 61
    28ce:	de b7       	in	r29, 0x3e	; 62
    28d0:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    28d2:	e3 e2       	ldi	r30, 0x23	; 35
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    28da:	e6 e5       	ldi	r30, 0x56	; 86
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	84 e8       	ldi	r24, 0x84	; 132
    28e0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    28e2:	e6 e5       	ldi	r30, 0x56	; 86
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	88 23       	and	r24, r24
    28ea:	dc f7       	brge	.-10     	; 0x28e2 <TWI_writeByte+0x1c>
}
    28ec:	0f 90       	pop	r0
    28ee:	cf 91       	pop	r28
    28f0:	df 91       	pop	r29
    28f2:	08 95       	ret

000028f4 <TWI_readByteWithACK>:
/*
 * Description :
 * Functional responsible for Reading a byte of data followed by an Acknowledgment by TWI.
 */
uint8 TWI_readByteWithACK(void)
{
    28f4:	df 93       	push	r29
    28f6:	cf 93       	push	r28
    28f8:	cd b7       	in	r28, 0x3d	; 61
    28fa:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    28fc:	e6 e5       	ldi	r30, 0x56	; 86
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	84 ec       	ldi	r24, 0xC4	; 196
    2902:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2904:	e6 e5       	ldi	r30, 0x56	; 86
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	88 23       	and	r24, r24
    290c:	dc f7       	brge	.-10     	; 0x2904 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    290e:	e3 e2       	ldi	r30, 0x23	; 35
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	80 81       	ld	r24, Z
}
    2914:	cf 91       	pop	r28
    2916:	df 91       	pop	r29
    2918:	08 95       	ret

0000291a <TWI_readByteWithNACK>:
/*
 * Description :
 * Functional responsible for Reading a byte of data followed by an Non-Acknowledgment by TWI.
 */
uint8 TWI_readByteWithNACK(void)
{
    291a:	df 93       	push	r29
    291c:	cf 93       	push	r28
    291e:	cd b7       	in	r28, 0x3d	; 61
    2920:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2922:	e6 e5       	ldi	r30, 0x56	; 86
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	84 e8       	ldi	r24, 0x84	; 132
    2928:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    292a:	e6 e5       	ldi	r30, 0x56	; 86
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	88 23       	and	r24, r24
    2932:	dc f7       	brge	.-10     	; 0x292a <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2934:	e3 e2       	ldi	r30, 0x23	; 35
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
}
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	08 95       	ret

00002940 <TWI_getStatus>:
/*
 * Description :
 * Functional responsible for Reading the TWI Status Register.
 */
uint8 TWI_getStatus(void)
{
    2940:	df 93       	push	r29
    2942:	cf 93       	push	r28
    2944:	0f 92       	push	r0
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    294a:	e1 e2       	ldi	r30, 0x21	; 33
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	88 7f       	andi	r24, 0xF8	; 248
    2952:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2954:	89 81       	ldd	r24, Y+1	; 0x01
}
    2956:	0f 90       	pop	r0
    2958:	cf 91       	pop	r28
    295a:	df 91       	pop	r29
    295c:	08 95       	ret

0000295e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    295e:	df 93       	push	r29
    2960:	cf 93       	push	r28
    2962:	00 d0       	rcall	.+0      	; 0x2964 <UART_init+0x6>
    2964:	00 d0       	rcall	.+0      	; 0x2966 <UART_init+0x8>
    2966:	cd b7       	in	r28, 0x3d	; 61
    2968:	de b7       	in	r29, 0x3e	; 62
    296a:	9c 83       	std	Y+4, r25	; 0x04
    296c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    296e:	1a 82       	std	Y+2, r1	; 0x02
    2970:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2972:	eb e2       	ldi	r30, 0x2B	; 43
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	82 e0       	ldi	r24, 0x02	; 2
    2978:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 9-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN) | (UCSRB & 0xFB) | ((Config_Ptr->bitData >> 2) << UCSZ2); /* ((Config_Ptr & 4) << (UCSZ2-2)) */
    297a:	aa e2       	ldi	r26, 0x2A	; 42
    297c:	b0 e0       	ldi	r27, 0x00	; 0
    297e:	ea e2       	ldi	r30, 0x2A	; 42
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	80 81       	ld	r24, Z
    2984:	83 7e       	andi	r24, 0xE3	; 227
    2986:	28 2f       	mov	r18, r24
    2988:	28 61       	ori	r18, 0x18	; 24
    298a:	eb 81       	ldd	r30, Y+3	; 0x03
    298c:	fc 81       	ldd	r31, Y+4	; 0x04
    298e:	80 81       	ld	r24, Z
    2990:	86 95       	lsr	r24
    2992:	86 95       	lsr	r24
    2994:	88 2f       	mov	r24, r24
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	88 0f       	add	r24, r24
    299a:	99 1f       	adc	r25, r25
    299c:	88 0f       	add	r24, r24
    299e:	99 1f       	adc	r25, r25
    29a0:	82 2b       	or	r24, r18
    29a2:	8c 93       	st	X, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1) | (UCSRC & 0xCF) | (Config_Ptr->parity << 4) | (UCSRC & 0xF9) | (((Config_Ptr->bitData) & 3) << 1); /* (Config_Ptr->parity << UPM0) */
    29a4:	a0 e4       	ldi	r26, 0x40	; 64
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	e0 e4       	ldi	r30, 0x40	; 64
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	89 74       	andi	r24, 0x49	; 73
    29b0:	28 2f       	mov	r18, r24
    29b2:	26 68       	ori	r18, 0x86	; 134
    29b4:	eb 81       	ldd	r30, Y+3	; 0x03
    29b6:	fc 81       	ldd	r31, Y+4	; 0x04
    29b8:	81 81       	ldd	r24, Z+1	; 0x01
    29ba:	88 2f       	mov	r24, r24
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	82 95       	swap	r24
    29c0:	92 95       	swap	r25
    29c2:	90 7f       	andi	r25, 0xF0	; 240
    29c4:	98 27       	eor	r25, r24
    29c6:	80 7f       	andi	r24, 0xF0	; 240
    29c8:	98 27       	eor	r25, r24
    29ca:	92 2f       	mov	r25, r18
    29cc:	98 2b       	or	r25, r24
    29ce:	e0 e4       	ldi	r30, 0x40	; 64
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	89 7f       	andi	r24, 0xF9	; 249
    29d6:	29 2f       	mov	r18, r25
    29d8:	28 2b       	or	r18, r24
    29da:	eb 81       	ldd	r30, Y+3	; 0x03
    29dc:	fc 81       	ldd	r31, Y+4	; 0x04
    29de:	80 81       	ld	r24, Z
    29e0:	88 2f       	mov	r24, r24
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	83 70       	andi	r24, 0x03	; 3
    29e6:	90 70       	andi	r25, 0x00	; 0
    29e8:	88 0f       	add	r24, r24
    29ea:	99 1f       	adc	r25, r25
    29ec:	82 2b       	or	r24, r18
    29ee:	8c 93       	st	X, r24

	if(Config_Ptr->stopBit == TWO_STOP_BITS)
    29f0:	eb 81       	ldd	r30, Y+3	; 0x03
    29f2:	fc 81       	ldd	r31, Y+4	; 0x04
    29f4:	82 81       	ldd	r24, Z+2	; 0x02
    29f6:	81 30       	cpi	r24, 0x01	; 1
    29f8:	39 f4       	brne	.+14     	; 0x2a08 <UART_init+0xaa>
	{
		UCSRC |= (TWO_STOP_BITS << USBS);
    29fa:	a0 e4       	ldi	r26, 0x40	; 64
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	e0 e4       	ldi	r30, 0x40	; 64
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 81       	ld	r24, Z
    2a04:	88 60       	ori	r24, 0x08	; 8
    2a06:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baudRate) * 8UL))) - 1);
    2a08:	eb 81       	ldd	r30, Y+3	; 0x03
    2a0a:	fc 81       	ldd	r31, Y+4	; 0x04
    2a0c:	83 81       	ldd	r24, Z+3	; 0x03
    2a0e:	94 81       	ldd	r25, Z+4	; 0x04
    2a10:	a5 81       	ldd	r26, Z+5	; 0x05
    2a12:	b6 81       	ldd	r27, Z+6	; 0x06
    2a14:	88 0f       	add	r24, r24
    2a16:	99 1f       	adc	r25, r25
    2a18:	aa 1f       	adc	r26, r26
    2a1a:	bb 1f       	adc	r27, r27
    2a1c:	88 0f       	add	r24, r24
    2a1e:	99 1f       	adc	r25, r25
    2a20:	aa 1f       	adc	r26, r26
    2a22:	bb 1f       	adc	r27, r27
    2a24:	88 0f       	add	r24, r24
    2a26:	99 1f       	adc	r25, r25
    2a28:	aa 1f       	adc	r26, r26
    2a2a:	bb 1f       	adc	r27, r27
    2a2c:	9c 01       	movw	r18, r24
    2a2e:	ad 01       	movw	r20, r26
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	92 e1       	ldi	r25, 0x12	; 18
    2a34:	aa e7       	ldi	r26, 0x7A	; 122
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	bc 01       	movw	r22, r24
    2a3a:	cd 01       	movw	r24, r26
    2a3c:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <__udivmodsi4>
    2a40:	da 01       	movw	r26, r20
    2a42:	c9 01       	movw	r24, r18
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	9a 83       	std	Y+2, r25	; 0x02
    2a48:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2a4a:	e0 e4       	ldi	r30, 0x40	; 64
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	9a 81       	ldd	r25, Y+2	; 0x02
    2a52:	89 2f       	mov	r24, r25
    2a54:	99 27       	eor	r25, r25
    2a56:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2a58:	e9 e2       	ldi	r30, 0x29	; 41
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	89 81       	ldd	r24, Y+1	; 0x01
    2a5e:	80 83       	st	Z, r24
}
    2a60:	0f 90       	pop	r0
    2a62:	0f 90       	pop	r0
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	cf 91       	pop	r28
    2a6a:	df 91       	pop	r29
    2a6c:	08 95       	ret

00002a6e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2a6e:	df 93       	push	r29
    2a70:	cf 93       	push	r28
    2a72:	0f 92       	push	r0
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
    2a78:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2a7a:	eb e2       	ldi	r30, 0x2B	; 43
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	88 2f       	mov	r24, r24
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	80 72       	andi	r24, 0x20	; 32
    2a86:	90 70       	andi	r25, 0x00	; 0
    2a88:	00 97       	sbiw	r24, 0x00	; 0
    2a8a:	b9 f3       	breq	.-18     	; 0x2a7a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2a8c:	ec e2       	ldi	r30, 0x2C	; 44
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2a94:	0f 90       	pop	r0
    2a96:	cf 91       	pop	r28
    2a98:	df 91       	pop	r29
    2a9a:	08 95       	ret

00002a9c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2a9c:	df 93       	push	r29
    2a9e:	cf 93       	push	r28
    2aa0:	cd b7       	in	r28, 0x3d	; 61
    2aa2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2aa4:	eb e2       	ldi	r30, 0x2B	; 43
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	88 23       	and	r24, r24
    2aac:	dc f7       	brge	.-10     	; 0x2aa4 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2aae:	ec e2       	ldi	r30, 0x2C	; 44
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
}
    2ab4:	cf 91       	pop	r28
    2ab6:	df 91       	pop	r29
    2ab8:	08 95       	ret

00002aba <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2aba:	df 93       	push	r29
    2abc:	cf 93       	push	r28
    2abe:	00 d0       	rcall	.+0      	; 0x2ac0 <UART_sendString+0x6>
    2ac0:	0f 92       	push	r0
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
    2ac6:	9b 83       	std	Y+3, r25	; 0x03
    2ac8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2aca:	19 82       	std	Y+1, r1	; 0x01
    2acc:	0e c0       	rjmp	.+28     	; 0x2aea <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	28 2f       	mov	r18, r24
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad8:	fc 01       	movw	r30, r24
    2ada:	e2 0f       	add	r30, r18
    2adc:	f3 1f       	adc	r31, r19
    2ade:	80 81       	ld	r24, Z
    2ae0:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <UART_sendByte>
		i++;
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	8f 5f       	subi	r24, 0xFF	; 255
    2ae8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	28 2f       	mov	r18, r24
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	8a 81       	ldd	r24, Y+2	; 0x02
    2af2:	9b 81       	ldd	r25, Y+3	; 0x03
    2af4:	fc 01       	movw	r30, r24
    2af6:	e2 0f       	add	r30, r18
    2af8:	f3 1f       	adc	r31, r19
    2afa:	80 81       	ld	r24, Z
    2afc:	88 23       	and	r24, r24
    2afe:	39 f7       	brne	.-50     	; 0x2ace <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
	UART_sendByte('#');
    2b00:	83 e2       	ldi	r24, 0x23	; 35
    2b02:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <UART_sendByte>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2b06:	0f 90       	pop	r0
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	cf 91       	pop	r28
    2b0e:	df 91       	pop	r29
    2b10:	08 95       	ret

00002b12 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2b12:	0f 93       	push	r16
    2b14:	1f 93       	push	r17
    2b16:	df 93       	push	r29
    2b18:	cf 93       	push	r28
    2b1a:	00 d0       	rcall	.+0      	; 0x2b1c <UART_receiveString+0xa>
    2b1c:	0f 92       	push	r0
    2b1e:	cd b7       	in	r28, 0x3d	; 61
    2b20:	de b7       	in	r29, 0x3e	; 62
    2b22:	9b 83       	std	Y+3, r25	; 0x03
    2b24:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b26:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2b28:	89 81       	ldd	r24, Y+1	; 0x01
    2b2a:	28 2f       	mov	r18, r24
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b30:	9b 81       	ldd	r25, Y+3	; 0x03
    2b32:	8c 01       	movw	r16, r24
    2b34:	02 0f       	add	r16, r18
    2b36:	13 1f       	adc	r17, r19
    2b38:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <UART_recieveByte>
    2b3c:	f8 01       	movw	r30, r16
    2b3e:	80 83       	st	Z, r24
    2b40:	0f c0       	rjmp	.+30     	; 0x2b60 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2b42:	89 81       	ldd	r24, Y+1	; 0x01
    2b44:	8f 5f       	subi	r24, 0xFF	; 255
    2b46:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2b48:	89 81       	ldd	r24, Y+1	; 0x01
    2b4a:	28 2f       	mov	r18, r24
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b50:	9b 81       	ldd	r25, Y+3	; 0x03
    2b52:	8c 01       	movw	r16, r24
    2b54:	02 0f       	add	r16, r18
    2b56:	13 1f       	adc	r17, r19
    2b58:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <UART_recieveByte>
    2b5c:	f8 01       	movw	r30, r16
    2b5e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	28 2f       	mov	r18, r24
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	9b 81       	ldd	r25, Y+3	; 0x03
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	e2 0f       	add	r30, r18
    2b6e:	f3 1f       	adc	r31, r19
    2b70:	80 81       	ld	r24, Z
    2b72:	83 32       	cpi	r24, 0x23	; 35
    2b74:	31 f7       	brne	.-52     	; 0x2b42 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	28 2f       	mov	r18, r24
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b80:	fc 01       	movw	r30, r24
    2b82:	e2 0f       	add	r30, r18
    2b84:	f3 1f       	adc	r31, r19
    2b86:	10 82       	st	Z, r1
}
    2b88:	0f 90       	pop	r0
    2b8a:	0f 90       	pop	r0
    2b8c:	0f 90       	pop	r0
    2b8e:	cf 91       	pop	r28
    2b90:	df 91       	pop	r29
    2b92:	1f 91       	pop	r17
    2b94:	0f 91       	pop	r16
    2b96:	08 95       	ret

00002b98 <__udivmodhi4>:
    2b98:	aa 1b       	sub	r26, r26
    2b9a:	bb 1b       	sub	r27, r27
    2b9c:	51 e1       	ldi	r21, 0x11	; 17
    2b9e:	07 c0       	rjmp	.+14     	; 0x2bae <__udivmodhi4_ep>

00002ba0 <__udivmodhi4_loop>:
    2ba0:	aa 1f       	adc	r26, r26
    2ba2:	bb 1f       	adc	r27, r27
    2ba4:	a6 17       	cp	r26, r22
    2ba6:	b7 07       	cpc	r27, r23
    2ba8:	10 f0       	brcs	.+4      	; 0x2bae <__udivmodhi4_ep>
    2baa:	a6 1b       	sub	r26, r22
    2bac:	b7 0b       	sbc	r27, r23

00002bae <__udivmodhi4_ep>:
    2bae:	88 1f       	adc	r24, r24
    2bb0:	99 1f       	adc	r25, r25
    2bb2:	5a 95       	dec	r21
    2bb4:	a9 f7       	brne	.-22     	; 0x2ba0 <__udivmodhi4_loop>
    2bb6:	80 95       	com	r24
    2bb8:	90 95       	com	r25
    2bba:	bc 01       	movw	r22, r24
    2bbc:	cd 01       	movw	r24, r26
    2bbe:	08 95       	ret

00002bc0 <__udivmodsi4>:
    2bc0:	a1 e2       	ldi	r26, 0x21	; 33
    2bc2:	1a 2e       	mov	r1, r26
    2bc4:	aa 1b       	sub	r26, r26
    2bc6:	bb 1b       	sub	r27, r27
    2bc8:	fd 01       	movw	r30, r26
    2bca:	0d c0       	rjmp	.+26     	; 0x2be6 <__udivmodsi4_ep>

00002bcc <__udivmodsi4_loop>:
    2bcc:	aa 1f       	adc	r26, r26
    2bce:	bb 1f       	adc	r27, r27
    2bd0:	ee 1f       	adc	r30, r30
    2bd2:	ff 1f       	adc	r31, r31
    2bd4:	a2 17       	cp	r26, r18
    2bd6:	b3 07       	cpc	r27, r19
    2bd8:	e4 07       	cpc	r30, r20
    2bda:	f5 07       	cpc	r31, r21
    2bdc:	20 f0       	brcs	.+8      	; 0x2be6 <__udivmodsi4_ep>
    2bde:	a2 1b       	sub	r26, r18
    2be0:	b3 0b       	sbc	r27, r19
    2be2:	e4 0b       	sbc	r30, r20
    2be4:	f5 0b       	sbc	r31, r21

00002be6 <__udivmodsi4_ep>:
    2be6:	66 1f       	adc	r22, r22
    2be8:	77 1f       	adc	r23, r23
    2bea:	88 1f       	adc	r24, r24
    2bec:	99 1f       	adc	r25, r25
    2bee:	1a 94       	dec	r1
    2bf0:	69 f7       	brne	.-38     	; 0x2bcc <__udivmodsi4_loop>
    2bf2:	60 95       	com	r22
    2bf4:	70 95       	com	r23
    2bf6:	80 95       	com	r24
    2bf8:	90 95       	com	r25
    2bfa:	9b 01       	movw	r18, r22
    2bfc:	ac 01       	movw	r20, r24
    2bfe:	bd 01       	movw	r22, r26
    2c00:	cf 01       	movw	r24, r30
    2c02:	08 95       	ret

00002c04 <__prologue_saves__>:
    2c04:	2f 92       	push	r2
    2c06:	3f 92       	push	r3
    2c08:	4f 92       	push	r4
    2c0a:	5f 92       	push	r5
    2c0c:	6f 92       	push	r6
    2c0e:	7f 92       	push	r7
    2c10:	8f 92       	push	r8
    2c12:	9f 92       	push	r9
    2c14:	af 92       	push	r10
    2c16:	bf 92       	push	r11
    2c18:	cf 92       	push	r12
    2c1a:	df 92       	push	r13
    2c1c:	ef 92       	push	r14
    2c1e:	ff 92       	push	r15
    2c20:	0f 93       	push	r16
    2c22:	1f 93       	push	r17
    2c24:	cf 93       	push	r28
    2c26:	df 93       	push	r29
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
    2c2c:	ca 1b       	sub	r28, r26
    2c2e:	db 0b       	sbc	r29, r27
    2c30:	0f b6       	in	r0, 0x3f	; 63
    2c32:	f8 94       	cli
    2c34:	de bf       	out	0x3e, r29	; 62
    2c36:	0f be       	out	0x3f, r0	; 63
    2c38:	cd bf       	out	0x3d, r28	; 61
    2c3a:	09 94       	ijmp

00002c3c <__epilogue_restores__>:
    2c3c:	2a 88       	ldd	r2, Y+18	; 0x12
    2c3e:	39 88       	ldd	r3, Y+17	; 0x11
    2c40:	48 88       	ldd	r4, Y+16	; 0x10
    2c42:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c44:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c46:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c48:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c4a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c4c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c4e:	b9 84       	ldd	r11, Y+9	; 0x09
    2c50:	c8 84       	ldd	r12, Y+8	; 0x08
    2c52:	df 80       	ldd	r13, Y+7	; 0x07
    2c54:	ee 80       	ldd	r14, Y+6	; 0x06
    2c56:	fd 80       	ldd	r15, Y+5	; 0x05
    2c58:	0c 81       	ldd	r16, Y+4	; 0x04
    2c5a:	1b 81       	ldd	r17, Y+3	; 0x03
    2c5c:	aa 81       	ldd	r26, Y+2	; 0x02
    2c5e:	b9 81       	ldd	r27, Y+1	; 0x01
    2c60:	ce 0f       	add	r28, r30
    2c62:	d1 1d       	adc	r29, r1
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	cd bf       	out	0x3d, r28	; 61
    2c6e:	ed 01       	movw	r28, r26
    2c70:	08 95       	ret

00002c72 <itoa>:
    2c72:	fb 01       	movw	r30, r22
    2c74:	9f 01       	movw	r18, r30
    2c76:	e8 94       	clt
    2c78:	42 30       	cpi	r20, 0x02	; 2
    2c7a:	c4 f0       	brlt	.+48     	; 0x2cac <itoa+0x3a>
    2c7c:	45 32       	cpi	r20, 0x25	; 37
    2c7e:	b4 f4       	brge	.+44     	; 0x2cac <itoa+0x3a>
    2c80:	4a 30       	cpi	r20, 0x0A	; 10
    2c82:	29 f4       	brne	.+10     	; 0x2c8e <itoa+0x1c>
    2c84:	97 fb       	bst	r25, 7
    2c86:	1e f4       	brtc	.+6      	; 0x2c8e <itoa+0x1c>
    2c88:	90 95       	com	r25
    2c8a:	81 95       	neg	r24
    2c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c8e:	64 2f       	mov	r22, r20
    2c90:	77 27       	eor	r23, r23
    2c92:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__udivmodhi4>
    2c96:	80 5d       	subi	r24, 0xD0	; 208
    2c98:	8a 33       	cpi	r24, 0x3A	; 58
    2c9a:	0c f0       	brlt	.+2      	; 0x2c9e <itoa+0x2c>
    2c9c:	89 5d       	subi	r24, 0xD9	; 217
    2c9e:	81 93       	st	Z+, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	00 97       	sbiw	r24, 0x00	; 0
    2ca4:	a1 f7       	brne	.-24     	; 0x2c8e <itoa+0x1c>
    2ca6:	16 f4       	brtc	.+4      	; 0x2cac <itoa+0x3a>
    2ca8:	5d e2       	ldi	r21, 0x2D	; 45
    2caa:	51 93       	st	Z+, r21
    2cac:	10 82       	st	Z, r1
    2cae:	c9 01       	movw	r24, r18
    2cb0:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <strrev>

00002cb4 <strrev>:
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	67 2f       	mov	r22, r23
    2cba:	71 91       	ld	r23, Z+
    2cbc:	77 23       	and	r23, r23
    2cbe:	e1 f7       	brne	.-8      	; 0x2cb8 <strrev+0x4>
    2cc0:	32 97       	sbiw	r30, 0x02	; 2
    2cc2:	04 c0       	rjmp	.+8      	; 0x2ccc <strrev+0x18>
    2cc4:	7c 91       	ld	r23, X
    2cc6:	6d 93       	st	X+, r22
    2cc8:	70 83       	st	Z, r23
    2cca:	62 91       	ld	r22, -Z
    2ccc:	ae 17       	cp	r26, r30
    2cce:	bf 07       	cpc	r27, r31
    2cd0:	c8 f3       	brcs	.-14     	; 0x2cc4 <strrev+0x10>
    2cd2:	08 95       	ret

00002cd4 <_exit>:
    2cd4:	f8 94       	cli

00002cd6 <__stop_program>:
    2cd6:	ff cf       	rjmp	.-2      	; 0x2cd6 <__stop_program>
